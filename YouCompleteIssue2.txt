I[21:50:37.377] clangd version 10.0.0 (https://github.com/ycm-core/llvm 038587147cf2f97d1c3e677042f69560c65b5bea)
I[21:50:37.378] PID: 17455
I[21:50:37.378] Working directory: /u/longc/temp
I[21:50:37.378] argv[0]: /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clangd
I[21:50:37.378] argv[1]: --query-driver=/depot/gcc-7.3.0/bin/g++
I[21:50:37.378] argv[2]: -header-insertion-decorators=0
I[21:50:37.378] argv[3]: -resource-dir=/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0
I[21:50:37.378] argv[4]: -limit-results=500
I[21:50:37.378] argv[5]: -log=verbose
I[21:50:37.378] Starting LSP over stdin/stdout
V[21:50:37.379] <<< {"id":1,"jsonrpc":"2.0","method":"initialize","params":{"capabilities":{"textDocument":{"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"completion":{"completionItem":{"documentationFormat":["plaintext","markdown"]},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"contentFormat":["plaintext","markdown"]},"signatureHelp":{"signatureInformation":{"documentationFormat":["plaintext","markdown"],"parameterInformation":{"labelOffsetSupport":true}}},"synchronization":{"didSave":true}},"workspace":{"applyEdit":true,"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"workspaceEdit":{"documentChanges":true}}},"initializationOptions":{},"processId":17395,"rootPath":"/remote/us01home43/longc/temp","rootUri":"file:///remote/us01home43/longc/temp"}}

I[21:50:37.379] <-- initialize(1)
I[21:50:37.381] --> reply:initialize(1) 2 ms
V[21:50:37.381] >>> {"id":1,"jsonrpc":"2.0","result":{"capabilities":{"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"completionProvider":{"resolveProvider":false,"triggerCharacters":[".",">",":"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"hoverProvider":true,"referencesProvider":true,"renameProvider":true,"selectionRangeProvider":true,"signatureHelpProvider":{"triggerCharacters":["(",","]},"textDocumentSync":2,"typeHierarchyProvider":true,"workspaceSymbolProvider":true}}}

V[21:50:37.384] <<< {"jsonrpc":"2.0","method":"initialized","params":{}}

I[21:50:37.385] <-- initialized
I[21:50:37.385] unhandled notification initialized
V[21:50:37.385] <<< {"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{}}}

I[21:50:37.385] <-- workspace/didChangeConfiguration
V[21:50:37.386] <<< {"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"languageId":"cpp","text":"#include <vector>\n\nint main() {\n   std::vector<int> ivec;\n   ivec.\n   return 0;\n}\n","uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp","version":1}}}

I[21:50:37.387] <-- textDocument/didOpen
V[21:50:37.781] <<< {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"#include <vector>\n\nint main() {\n   return 0;\n}\n"}],"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp","version":2}}}

I[21:50:37.782] <-- textDocument/didChange
V[21:50:37.783] System include extraction: not whitelisted driver /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clang-tool
I[21:50:37.783] Enqueueing 0 commands for indexing
I[21:50:37.783] Updating file /remote/us01home43/longc/temp/mycpptest.cpp with command 
[/remote/us01home43/longc/temp]
/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clang-tool -I/depot/gcc-7.3.0/include/c++/7.3.0 /remote/us01home43/longc/temp/mycpptest.cpp -fsyntax-only -resource-dir=/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0
V[21:50:37.791] Driver produced command: cc1 -cc1 -triple x86_64-unknown-linux-gnu -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name mycpptest.cpp -mrelocation-model static -mthread-model posix -mframe-pointer=all -fmath-errno -fno-rounding-math -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -fno-split-dwarf-inlining -debugger-tuning=gdb -resource-dir /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0 -I /depot/gcc-7.3.0/include/c++/7.3.0 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/x86_64-redhat-linux -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/backward -internal-isystem /usr/local/include -internal-isystem /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0/include -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdeprecated-macro -fdebug-compilation-dir /remote/us01home43/longc/temp -ferror-limit 19 -fmessage-length 0 -fgnuc-version=4.2.1 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -faddrsig -x c++ /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:37.792] Building first preamble for /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:37.839] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected '(' for function-style cast or type construction
V[21:50:37.839] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected ',' or '>' in template-parameter-list
V[21:50:37.844] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected '(' for function-style cast or type construction
V[21:50:37.844] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: use of undeclared identifier '_GLIBCXX_NOEXCEPT_QUAL'
V[21:50:37.844] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected ',' or '>' in template-parameter-list
V[21:50:37.850] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected '(' for function-style cast or type construction
V[21:50:37.850] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: use of undeclared identifier '_GLIBCXX_NOEXCEPT_QUAL'
V[21:50:37.850] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected ',' or '>' in template-parameter-list
V[21:50:37.851] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected '(' for function-style cast or type construction
V[21:50:37.851] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected ',' or '>' in template-parameter-list
V[21:50:37.855] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected '(' for function-style cast or type construction
V[21:50:37.855] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: use of undeclared identifier '_GLIBCXX_NOEXCEPT_QUAL'
V[21:50:37.855] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected ',' or '>' in template-parameter-list
V[21:50:37.862] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected '(' for function-style cast or type construction
V[21:50:37.862] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: use of undeclared identifier '_GLIBCXX_NOEXCEPT_QUAL'
V[21:50:37.862] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected ',' or '>' in template-parameter-list
V[21:50:37.862] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected '(' for function-style cast or type construction
V[21:50:37.862] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: expected ',' or '>' in template-parameter-list
V[21:50:38.146] index AST for /remote/us01home43/longc/temp/mycpptest.cpp (main=false): 
  symbol slab: 2464 symbols, 706944 bytes
  ref slab: 0 symbols, 0 refs, 136 bytes
  relations slab: 172 relations, 4376 bytes
V[21:50:38.237] Built preamble of size 917012 for file /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:39.106] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: type 'int' cannot be used prior to '::' because it has no members
V[21:50:39.106] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'pointer' in 'std::allocator_traits<int>'
V[21:50:39.106] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'const_pointer' in 'std::allocator_traits<int>'
V[21:50:39.106] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'size_type' in 'std::allocator_traits<int>'
V[21:50:39.106] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'difference_type' in 'std::allocator_traits<int>'
V[21:50:39.114] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: base specifier must name a class
V[21:50:39.116] index AST for /remote/us01home43/longc/temp/mycpptest.cpp (main=true): 
  symbol slab: 1 symbols, 4456 bytes
  ref slab: 1 symbols, 1 refs, 4256 bytes
  relations slab: 0 relations, 24 bytes
I[21:50:39.116] --> textDocument/publishDiagnostics
V[21:50:39.119] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_comma_greater","message":"In included file: expected ',' or '>' in template-parameter-list\n\n/depot/gcc-7.3.0/include/c++/7.3.0/type_traits:458:49:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"fatal_too_many_errors","message":"Too many errors emitted, stopping now","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"no_member","message":"In included file: no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'\n\n/depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:77:2:\nnote: error occurred here\n\n/depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:\nnote: in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here\n\nmycpptest.cpp:4:21: note: in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here","range":{"end":{"character":1,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"message":"In instantiation of template class 'std::vector<int, std::allocator<int> >' requested here\n\nmycpptest.cpp:1:1: error: in included file: no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'","range":{"end":{"character":24,"line":3},"start":{"character":20,"line":3}},"severity":3},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":9,"line":5},"start":{"character":3,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}

I[21:50:39.120] Updating file /remote/us01home43/longc/temp/mycpptest.cpp with command 
[/remote/us01home43/longc/temp]
/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clang-tool -I/depot/gcc-7.3.0/include/c++/7.3.0 /remote/us01home43/longc/temp/mycpptest.cpp -fsyntax-only -resource-dir=/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0
V[21:50:39.126] Driver produced command: cc1 -cc1 -triple x86_64-unknown-linux-gnu -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name mycpptest.cpp -mrelocation-model static -mthread-model posix -mframe-pointer=all -fmath-errno -fno-rounding-math -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -fno-split-dwarf-inlining -debugger-tuning=gdb -resource-dir /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0 -I /depot/gcc-7.3.0/include/c++/7.3.0 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/x86_64-redhat-linux -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/backward -internal-isystem /usr/local/include -internal-isystem /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0/include -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdeprecated-macro -fdebug-compilation-dir /remote/us01home43/longc/temp -ferror-limit 19 -fmessage-length 0 -fgnuc-version=4.2.1 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -faddrsig -x c++ /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:39.127] Reusing preamble for /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:39.133] index AST for /remote/us01home43/longc/temp/mycpptest.cpp (main=true): 
  symbol slab: 1 symbols, 4456 bytes
  ref slab: 0 symbols, 0 refs, 136 bytes
  relations slab: 0 relations, 24 bytes
I[21:50:39.133] --> textDocument/publishDiagnostics
V[21:50:39.134] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_comma_greater","message":"In included file: expected ',' or '>' in template-parameter-list\n\n/depot/gcc-7.3.0/include/c++/7.3.0/type_traits:458:49:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"fatal_too_many_errors","message":"Too many errors emitted, stopping now","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"}],"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}

V[21:50:39.198] <<< {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"#include <vector>\n\nint main() {\n   std::\n   return 0;\n}\n"}],"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp","version":3}}}

I[21:50:39.199] <-- textDocument/didChange
V[21:50:39.200] <<< {"id":2,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":8,"line":3},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:39.200] <-- textDocument/completion(2)
V[21:50:39.211] Code complete: fuzzyFind({
  "AnyScope": false,
  "Limit": 500,
  "PreferredTypes": [
    []
  ],
  "ProximityPaths": [
    [
      "/remote/us01home43/longc/temp/mycpptest.cpp"
    ]
  ],
  "Query": "",
  "RestrictForCodeCompletion": true,
  "Scopes": [
    [
      "std::"
    ]
  ]
})
V[21:50:39.211] Dex query tree: (LIMIT 50000 (& S=std:: ?=Restricted For Code Completion))
I[21:50:39.225] Code complete: sema context Symbol, query scopes [std::] (AnyScope=false), expected type <none>
I[21:50:39.225] Code complete: 0 results from Sema, 436 from Index, 0 matched, 0 from identifiers, 436 returned (incomplete).
I[21:50:39.281] --> reply:textDocument/completion(2) 80 ms
V[21:50:39.295] >>> {"id":2,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"\n @defgroup allocators Allocators\n @ingroup memory\n\n Classes encapsulating memory operations.\n\n @{\n   ","filterText":"allocator","insertText":"allocator","insertTextFormat":1,"kind":7,"label":"allocator<typename>","score":4.1770477294921875,"sortText":"3f7a55a0allocator","textEdit":{"newText":"allocator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int *\n<iterator>","documentation":"\n  @brief  Return an iterator pointing to the first element of the array.\n  @param  __arr  Array.\n   ","filterText":"begin","insertText":"begin","insertTextFormat":1,"kind":6,"label":"begin","score":4.1770477294921875,"sortText":"3f7a55a0begin","textEdit":{"newText":"begin","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[4 overloads]\n<iterator>","documentation":"\n  @brief  Return an iterator pointing to the first element of\n          the container.\n  @param  __cont  Container.\n   ","filterText":"begin","insertText":"begin","insertTextFormat":1,"kind":3,"label":"begin(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0begin","textEdit":{"newText":"begin","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"decltype(std::begin(__cont))\n<iterator>","documentation":"\n  @brief  Return an iterator pointing to the first element of\n          the const container.\n  @param  __cont  Container.\n   ","filterText":"cbegin","insertText":"cbegin","insertTextFormat":1,"kind":3,"label":"cbegin(const _Container &__cont)","score":4.1770477294921875,"sortText":"3f7a55a0cbegin","textEdit":{"newText":"cbegin","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"decltype(std::end(__cont))\n<iterator>","documentation":"\n  @brief  Return an iterator pointing to one past the last element of\n          the const container.\n  @param  __cont  Container.\n   ","filterText":"cend","insertText":"cend","insertTextFormat":1,"kind":3,"label":"cend(const _Container &__cont)","score":4.1770477294921875,"sortText":"3f7a55a0cend","textEdit":{"newText":"cend","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_OI\n<algorithm>","documentation":"\n  @brief Copies the range [first,last) into result.\n  @ingroup mutating_algorithms\n  @param  __first  An input iterator.\n  @param  __last   An input iterator.\n  @param  __result An output iterator.\n  @return   result + (first - last)\n\n  This inline function will boil down to a call to @c memmove whenever\n  possible.  Failing that, if random access iterators are passed, then the\n  loop count will be known (and therefore a candidate for compiler\n  optimizations such as unrolling).  Result may not be contained within\n  [first,last); the copy_backward function should be used instead.\n\n  Note that the end of the output range is permitted to be contained\n  within [first,last).\n  ","filterText":"copy","insertText":"copy","insertTextFormat":1,"kind":3,"label":"copy(_II __first, _II __last, _OI __result)","score":4.1770477294921875,"sortText":"3f7a55a0copy","textEdit":{"newText":"copy","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_BI2\n<algorithm>","documentation":"\n  @brief Copies the range [first,last) into result.\n  @ingroup mutating_algorithms\n  @param  __first  A bidirectional iterator.\n  @param  __last   A bidirectional iterator.\n  @param  __result A bidirectional iterator.\n  @return   result - (first - last)\n\n  The function has the same effect as copy, but starts at the end of the\n  range and works its way to the start, returning the start of the result.\n  This inline function will boil down to a call to @c memmove whenever\n  possible.  Failing that, if random access iterators are passed, then the\n  loop count will be known (and therefore a candidate for compiler\n  optimizations such as unrolling).\n\n  Result may not be in the range (first,last].  Use copy instead.  Note\n  that the start of the output range may overlap [first,last).\n  ","filterText":"copy_backward","insertText":"copy_backward","insertTextFormat":1,"kind":3,"label":"copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)","score":4.1770477294921875,"sortText":"3f7a55a0copy_backward","textEdit":{"newText":"copy_backward","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[5 overloads]\n<iterator>","documentation":"\n  @brief  Return an iterator pointing to one past the last element of\n          the const container.\n  @param  __cont  Container.\n   ","filterText":"end","insertText":"end","insertTextFormat":1,"kind":3,"label":"end(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0end","textEdit":{"newText":"end","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<algorithm>","documentation":"\n  @brief Tests a range for element-wise equality.\n  @ingroup non_mutating_algorithms\n  @param  __first1  An input iterator.\n  @param  __last1   An input iterator.\n  @param  __first2  An input iterator.\n  @return   A boolean true or false.\n\n  This compares the elements of two ranges using @c == and returns true or\n  false depending on whether all of the corresponding elements of the\n  ranges are equal.\n  ","filterText":"equal","insertText":"equal","insertTextFormat":1,"kind":3,"label":"equal(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0equal","textEdit":{"newText":"equal","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<algorithm>","documentation":"\n  @brief Fills the range [first,last) with copies of value.\n  @ingroup mutating_algorithms\n  @param  __first  A forward iterator.\n  @param  __last   A forward iterator.\n  @param  __value  A reference-to-const of arbitrary type.\n  @return   Nothing.\n\n  This function fills a range with copies of the same value.  For char\n  types filling contiguous areas of memory, this becomes an inline call\n  to @c memset or @c wmemset.\n  ","filterText":"fill","insertText":"fill","insertTextFormat":1,"kind":3,"label":"fill(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0fill","textEdit":{"newText":"fill","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_OI\n<algorithm>","documentation":"\n  @brief Fills the range [first,first+n) with copies of value.\n  @ingroup mutating_algorithms\n  @param  __first  An output iterator.\n  @param  __n      The count of copies to perform.\n  @param  __value  A reference-to-const of arbitrary type.\n  @return   The iterator at first+n.\n\n  This function fills a range with copies of the same value.  For char\n  types filling contiguous areas of memory, this becomes an inline call\n  to @c memset or @ wmemset.\n\n  _GLIBCXX_RESOLVE_LIB_DEFECTS\n  DR 865. More algorithms that throw away information\n  ","filterText":"fill_n","insertText":"fill_n","insertTextFormat":1,"kind":3,"label":"fill_n(_OI __first, _Size __n, const _Tp &__value)","score":4.1770477294921875,"sortText":"3f7a55a0fill_n","textEdit":{"newText":"fill_n","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","filterText":"istreambuf_iterator","insertText":"istreambuf_iterator","insertTextFormat":1,"kind":7,"label":"istreambuf_iterator<typename _CharT, typename _Traits>","score":4.1770477294921875,"sortText":"3f7a55a0istreambuf_iterator","textEdit":{"newText":"istreambuf_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<algorithm>","documentation":"\n  @brief Swaps the contents of two iterators.\n  @ingroup mutating_algorithms\n  @param  __a  An iterator.\n  @param  __b  Another iterator.\n  @return   Nothing.\n\n  This function swaps the values pointed to by two iterators, not the\n  iterators themselves.\n  ","filterText":"iter_swap","insertText":"iter_swap","insertTextFormat":1,"kind":3,"label":"iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)","score":4.1770477294921875,"sortText":"3f7a55a0iter_swap","textEdit":{"newText":"iter_swap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<algorithm>","documentation":"\n  @brief Performs @b dictionary comparison on ranges.\n  @ingroup sorting_algorithms\n  @param  __first1  An input iterator.\n  @param  __last1   An input iterator.\n  @param  __first2  An input iterator.\n  @param  __last2   An input iterator.\n  @param  __comp  A @link comparison_functors comparison functor@endlink.\n  @return   A boolean true or false.\n\n  The same as the four-parameter @c lexicographical_compare, but uses the\n  comp parameter instead of @c <.\n  ","filterText":"lexicographical_compare","insertText":"lexicographical_compare","insertTextFormat":1,"kind":3,"label":"lexicographical_compare(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0lexicographical_compare","textEdit":{"newText":"lexicographical_compare","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<algorithm>","documentation":"\n  @brief Finds the first position in which @a val could be inserted\n         without changing the ordering.\n  @param  __first   An iterator.\n  @param  __last    Another iterator.\n  @param  __val     The search term.\n  @return         An iterator pointing to the first element <em>not less\n                  than</em> @a val, or end() if every element is less than \n                  @a val.\n  @ingroup binary_search_algorithms\n  ","filterText":"lower_bound","insertText":"lower_bound","insertTextFormat":1,"kind":3,"label":"lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val)","score":4.1770477294921875,"sortText":"3f7a55a0lower_bound","textEdit":{"newText":"lower_bound","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<algorithm>","documentation":"\n  @brief This does what you think it does.\n  @ingroup sorting_algorithms\n  @param  __a  A thing of arbitrary type.\n  @param  __b  Another thing of arbitrary type.\n  @param  __comp  A @link comparison_functors comparison functor@endlink.\n  @return   The greater of the parameters.\n\n  This will work on temporary expressions, since they are only evaluated\n  once, unlike a preprocessor macro.\n  ","filterText":"max","insertText":"max","insertTextFormat":1,"kind":3,"label":"max(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0max","textEdit":{"newText":"max","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int &\n<algorithm>","documentation":"\n  @brief This does what you think it does.\n  @ingroup sorting_algorithms\n  @param  __a  A thing of arbitrary type.\n  @param  __b  Another thing of arbitrary type.\n  @return   The lesser of the parameters.\n\n  This is the simple classic generic implementation.  It will work on\n  temporary expressions, since they are only evaluated once, unlike a\n  preprocessor macro.\n  ","filterText":"min","insertText":"min","insertTextFormat":1,"kind":3,"label":"min(const int &__a, const int &__b)","score":4.1770477294921875,"sortText":"3f7a55a0min","textEdit":{"newText":"min","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<algorithm>","documentation":"\n  @brief Finds the places in ranges which don't match.\n  @ingroup non_mutating_algorithms\n  @param  __first1  An input iterator.\n  @param  __last1   An input iterator.\n  @param  __first2  An input iterator.\n  @param  __last2   An input iterator.\n  @return   A pair of iterators pointing to the first mismatch.\n\n  This compares the elements of two ranges using @c == and returns a pair\n  of iterators.  The first iterator points into the first range, the\n  second iterator points into the second range, and the elements pointed\n  to by the iterators are not equal.\n  ","filterText":"mismatch","insertText":"mismatch","insertTextFormat":1,"kind":3,"label":"mismatch(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0mismatch","textEdit":{"newText":"mismatch","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_BI2\n<algorithm>","documentation":"\n  @brief Moves the range [first,last) into result.\n  @ingroup mutating_algorithms\n  @param  __first  A bidirectional iterator.\n  @param  __last   A bidirectional iterator.\n  @param  __result A bidirectional iterator.\n  @return   result - (first - last)\n\n  The function has the same effect as move, but starts at the end of the\n  range and works its way to the start, returning the start of the result.\n  This inline function will boil down to a call to @c memmove whenever\n  possible.  Failing that, if random access iterators are passed, then the\n  loop count will be known (and therefore a candidate for compiler\n  optimizations such as unrolling).\n\n  Result may not be in the range (first,last].  Use move instead.  Note\n  that the start of the output range may overlap [first,last).\n  ","filterText":"move_backward","insertText":"move_backward","insertTextFormat":1,"kind":3,"label":"move_backward(_BI1 __first, _BI1 __last, _BI2 __result)","score":4.1770477294921875,"sortText":"3f7a55a0move_backward","textEdit":{"newText":"move_backward","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <allocator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<allocator>","filterText":"operator!=","insertText":"operator!=","insertTextFormat":1,"kind":3,"label":"operator!=(const allocator<_T1> &, const allocator<_T2> &)","score":4.1770477294921875,"sortText":"3f7a55a0operator!=","textEdit":{"newText":"operator!=","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"[2 overloads]\n<vector>","filterText":"operator+","insertText":"operator+","insertTextFormat":1,"kind":3,"label":"operator+(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0operator+","textEdit":{"newText":"operator+","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"ptrdiff_t\n<vector>","filterText":"operator-","insertText":"operator-","insertTextFormat":1,"kind":3,"label":"operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y)","score":4.1770477294921875,"sortText":"3f7a55a0operator-","textEdit":{"newText":"operator-","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"bool\n<vector>","documentation":"\n  @brief  Vector ordering relation.\n  @param  __x  A %vector.\n  @param  __y  A %vector of the same type as @a __x.\n  @return  True iff @a __x is lexicographically less than @a __y.\n\n  This is a total ordering relation.  It is linear in the size of the\n  vectors.  The elements must be comparable with @c <.\n\n  See std::lexicographical_compare() for how the determination is made.\n  ","filterText":"operator<","insertText":"operator<","insertTextFormat":1,"kind":3,"label":"operator<(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)","score":4.1770477294921875,"sortText":"3f7a55a0operator<","textEdit":{"newText":"operator<","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <allocator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<allocator>","filterText":"operator==","insertText":"operator==","insertTextFormat":1,"kind":3,"label":"operator==(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0operator==","textEdit":{"newText":"operator==","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"bool\n<vector>","documentation":"\n  @brief  Vector equality comparison.\n  @param  __x  A %vector.\n  @param  __y  A %vector of the same type as @a __x.\n  @return  True iff the size and elements of the vectors are equal.\n\n  This is an equivalence relation.  It is linear in the size of the\n  vectors.  Vectors are considered equivalent if their sizes are equal,\n  and if corresponding elements compare equal.\n  ","filterText":"operator==","insertText":"operator==","insertTextFormat":1,"kind":3,"label":"operator==(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)","score":4.1770477294921875,"sortText":"3f7a55a0operator==","textEdit":{"newText":"operator==","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"bool\n<vector>","documentation":"Based on operator<","filterText":"operator>","insertText":"operator>","insertTextFormat":1,"kind":3,"label":"operator>(const vector<_Tp, _Alloc> &__x, const vector<_Tp, _Alloc> &__y)","score":4.1770477294921875,"sortText":"3f7a55a0operator>","textEdit":{"newText":"operator>","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","filterText":"ostreambuf_iterator","insertText":"ostreambuf_iterator","insertTextFormat":1,"kind":7,"label":"ostreambuf_iterator<typename _CharT, typename _Traits>","score":4.1770477294921875,"sortText":"3f7a55a0ostreambuf_iterator","textEdit":{"newText":"ostreambuf_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<iterator>","documentation":"\n  @brief  Return a reverse iterator pointing to the last element of\n          the container.\n  @param  __cont  Container.\n   ","filterText":"rbegin","insertText":"rbegin","insertTextFormat":1,"kind":3,"label":"rbegin(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0rbegin","textEdit":{"newText":"rbegin","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","documentation":"\n  @brief  Return a reverse iterator pointing to the last element of\n          the array.\n  @param  __arr  Array.\n   ","filterText":"rbegin","insertText":"rbegin","insertTextFormat":1,"kind":6,"label":"rbegin","score":4.1770477294921875,"sortText":"3f7a55a0rbegin","textEdit":{"newText":"rbegin","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<iterator>","documentation":"\n  @brief  Return a reverse iterator pointing one past the first element of\n          the container.\n  @param  __cont  Container.\n   ","filterText":"rend","insertText":"rend","insertTextFormat":1,"kind":3,"label":"rend(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0rend","textEdit":{"newText":"rend","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"[4 overloads]\n<vector>","documentation":"See std::vector::swap().","filterText":"swap","insertText":"swap","insertTextFormat":1,"kind":3,"label":"swap(\u2026)","score":4.1770477294921875,"sortText":"3f7a55a0swap","textEdit":{"newText":"swap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator2\n<algorithm>","documentation":"\n  @brief Swap the elements of two sequences.\n  @ingroup mutating_algorithms\n  @param  __first1  A forward iterator.\n  @param  __last1   A forward iterator.\n  @param  __first2  A forward iterator.\n  @return   An iterator equal to @p first2+(last1-first1).\n\n  Swaps each element in the range @p [first1,last1) with the\n  corresponding element in the range @p [first2,(last1-first1)).\n  The ranges must not overlap.\n  ","filterText":"swap_ranges","insertText":"swap_ranges","insertTextFormat":1,"kind":3,"label":"swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)","score":4.1770477294921875,"sortText":"3f7a55a0swap_ranges","textEdit":{"newText":"swap_ranges","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<memory>","documentation":"\n  @brief Copies the range [first,last) into result.\n  @param  __first  An input iterator.\n  @param  __last   An input iterator.\n  @param  __result An output iterator.\n  @return   __result + (__first - __last)\n\n  Like copy(), but does not require an initialized output range.\n  ","filterText":"uninitialized_copy","insertText":"uninitialized_copy","insertTextFormat":1,"kind":3,"label":"uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)","score":4.1770477294921875,"sortText":"3f7a55a0uninitialized_copy","textEdit":{"newText":"uninitialized_copy","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","documentation":"\n  @brief Copies the value x into the range [first,last).\n  @param  __first  An input iterator.\n  @param  __last   An input iterator.\n  @param  __x      The source value.\n  @return   Nothing.\n\n  Like fill(), but does not require an initialized output range.\n  ","filterText":"uninitialized_fill","insertText":"uninitialized_fill","insertTextFormat":1,"kind":3,"label":"uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x)","score":4.1770477294921875,"sortText":"3f7a55a0uninitialized_fill","textEdit":{"newText":"uninitialized_fill","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"\n<vector>","documentation":"\n  @brief A standard container which offers fixed time access to\n  individual elements in any order.\n\n  @ingroup sequences\n\n  @tparam _Tp  Type of element.\n  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.\n\n  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n  <a href=\"tables.html#66\">reversible container</a>, and a\n  <a href=\"tables.html#67\">sequence</a>, including the\n  <a href=\"tables.html#68\">optional sequence requirements</a> with the\n  %exception of @c push_front and @c pop_front.\n\n  In some terminology a %vector can be described as a dynamic\n  C-style array, it offers fast and efficient access to individual\n  elements in any order and saves the user from worrying about\n  memory and size allocation.  Subscripting ( @c [] ) access is\n  also provided as with C-style arrays.\n  ","filterText":"vector","insertText":"vector","insertTextFormat":1,"kind":7,"label":"vector<typename _Tp, typename _Alloc>","score":4.1770477294921875,"sortText":"3f7a55a0vector","textEdit":{"newText":"vector","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"add_const","filterText":"add_const","insertText":"add_const","insertTextFormat":1,"kind":7,"label":"add_const<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebadd_const","textEdit":{"newText":"add_const","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for add_const","filterText":"add_const_t","insertText":"add_const_t","insertTextFormat":1,"kind":8,"label":"add_const_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebadd_const_t","textEdit":{"newText":"add_const_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"add_lvalue_reference","filterText":"add_lvalue_reference","insertText":"add_lvalue_reference","insertTextFormat":1,"kind":7,"label":"add_lvalue_reference<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebadd_lvalue_reference","textEdit":{"newText":"add_lvalue_reference","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"add_pointer","insertText":"add_pointer","insertTextFormat":1,"kind":7,"label":"add_pointer<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebadd_pointer","textEdit":{"newText":"add_pointer","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for add_pointer","filterText":"add_pointer_t","insertText":"add_pointer_t","insertTextFormat":1,"kind":8,"label":"add_pointer_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebadd_pointer_t","textEdit":{"newText":"add_pointer_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Destructible and constructible type properties.","filterText":"add_rvalue_reference","insertText":"add_rvalue_reference","insertTextFormat":1,"kind":7,"label":"add_rvalue_reference<typename>","score":3.8186695575714111,"sortText":"3f8b9aebadd_rvalue_reference","textEdit":{"newText":"add_rvalue_reference","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for add_rvalue_reference","filterText":"add_rvalue_reference_t","insertText":"add_rvalue_reference_t","insertTextFormat":1,"kind":8,"label":"add_rvalue_reference_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebadd_rvalue_reference_t","textEdit":{"newText":"add_rvalue_reference_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for add_volatile","filterText":"add_volatile_t","insertText":"add_volatile_t","insertTextFormat":1,"kind":8,"label":"add_volatile_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebadd_volatile_t","textEdit":{"newText":"add_volatile_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"\n  @brief Alignment type.\n\n  The value of _Align is a default-alignment which shall be the\n  most stringent alignment requirement for any C++ object type\n  whose size is no greater than _Len (3.9). The member typedef\n  type shall be a POD type suitable for use as uninitialized\n  storage for any object whose size is at most _Len and whose\n  alignment is a divisor of _Align.\n  ","filterText":"aligned_storage","insertText":"aligned_storage","insertTextFormat":1,"kind":7,"label":"aligned_storage<std::size_t _Len, std::size_t _Align>","score":3.8186695575714111,"sortText":"3f8b9aebaligned_storage","textEdit":{"newText":"aligned_storage","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for aligned_storage","filterText":"aligned_storage_t","insertText":"aligned_storage_t","insertTextFormat":1,"kind":8,"label":"aligned_storage_t<size_t _Len, size_t _Align>","score":3.8186695575714111,"sortText":"3f8b9aebaligned_storage_t","textEdit":{"newText":"aligned_storage_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"\n  @brief Provide aligned storage for types.\n\n  [meta.trans.other]\n\n  Provides aligned storage for any of the provided types of at\n  least size _Len.\n\n  @see aligned_storage\n   ","filterText":"aligned_union","insertText":"aligned_union","insertTextFormat":1,"kind":7,"label":"aligned_union<size_t _Len, typename _Types>","score":3.8186695575714111,"sortText":"3f8b9aebaligned_union","textEdit":{"newText":"aligned_union","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"alignment_of","filterText":"alignment_of","insertText":"alignment_of","insertTextFormat":1,"kind":7,"label":"alignment_of<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebalignment_of","textEdit":{"newText":"alignment_of","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<new>","documentation":"\n  @brief  Exception possibly thrown by @c new.\n  @ingroup exceptions\n\n  @c bad_alloc (or classes derived from it) is used to report allocation\n  errors from the throwing forms of @c new.  ","filterText":"bad_alloc","insertText":"bad_alloc","insertTextFormat":1,"kind":7,"label":"bad_alloc","score":3.8186695575714111,"sortText":"3f8b9aebbad_alloc","textEdit":{"newText":"bad_alloc","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<new>","filterText":"bad_array_new_length","insertText":"bad_array_new_length","insertTextFormat":1,"kind":7,"label":"bad_array_new_length","score":3.8186695575714111,"sortText":"3f8b9aebbad_array_new_length","textEdit":{"newText":"bad_array_new_length","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<exception>","documentation":"If an %exception is thrown which is not listed in a function's\n%exception specification, one of these may be thrown.  ","filterText":"bad_exception","insertText":"bad_exception","insertTextFormat":1,"kind":7,"label":"bad_exception","score":3.8186695575714111,"sortText":"3f8b9aebbad_exception","textEdit":{"newText":"bad_exception","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <typeinfo>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<typeinfo>","documentation":"\n  @brief Thrown when a NULL pointer in a @c typeid expression is used.\n  @ingroup exceptions\n   ","filterText":"bad_typeid","insertText":"bad_typeid","insertTextFormat":1,"kind":7,"label":"bad_typeid","score":3.8186695575714111,"sortText":"3f8b9aebbad_typeid","textEdit":{"newText":"bad_typeid","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"common_type","filterText":"common_type","insertText":"common_type","insertTextFormat":1,"kind":7,"label":"common_type<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebcommon_type","textEdit":{"newText":"common_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for common_type","filterText":"common_type_t","insertText":"common_type_t","insertTextFormat":1,"kind":8,"label":"common_type_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebcommon_type_t","textEdit":{"newText":"common_type_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Meta programming helper types.","filterText":"conditional","insertText":"conditional","insertTextFormat":1,"kind":7,"label":"conditional<bool, typename, typename>","score":3.8186695575714111,"sortText":"3f8b9aebconditional","textEdit":{"newText":"conditional","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"decay","filterText":"decay","insertText":"decay","insertTextFormat":1,"kind":7,"label":"decay<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebdecay","textEdit":{"newText":"decay","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for decay","filterText":"decay_t","insertText":"decay_t","insertTextFormat":1,"kind":8,"label":"decay_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebdecay_t","textEdit":{"newText":"decay_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"typename add_rvalue_reference<_Tp>::type\n<utility>","documentation":"\n  @brief  Utility to simplify expressions used in unevaluated operands\n  @ingroup utilities\n   ","filterText":"declval","insertText":"declval","insertTextFormat":1,"kind":3,"label":"declval<typename _Tp>()","score":3.8186695575714111,"sortText":"3f8b9aebdeclval","textEdit":{"newText":"declval","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"extent","filterText":"extent","insertText":"extent","insertTextFormat":1,"kind":7,"label":"extent<typename, unsigned int>","score":3.8186695575714111,"sortText":"3f8b9aebextent","textEdit":{"newText":"extent","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"The type used as a compile-time boolean with false value.","filterText":"false_type","insertText":"false_type","insertTextFormat":1,"kind":8,"label":"false_type","score":3.8186695575714111,"sortText":"3f8b9aebfalse_type","textEdit":{"newText":"false_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"new_handler\n<new>","documentation":"Return the current new handler.","filterText":"get_new_handler","insertText":"get_new_handler","insertTextFormat":1,"kind":3,"label":"get_new_handler()","score":3.8186695575714111,"sortText":"3f8b9aebget_new_handler","textEdit":{"newText":"get_new_handler","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"has_virtual_destructor","filterText":"has_virtual_destructor","insertText":"has_virtual_destructor","insertTextFormat":1,"kind":7,"label":"has_virtual_destructor<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebhas_virtual_destructor","textEdit":{"newText":"has_virtual_destructor","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <initializer_list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<initializer_list>","documentation":"initializer_list","filterText":"initializer_list","insertText":"initializer_list","insertTextFormat":1,"kind":7,"label":"initializer_list<class _E>","score":3.8186695575714111,"sortText":"3f8b9aebinitializer_list","textEdit":{"newText":"initializer_list","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"integral_constant","filterText":"integral_constant","insertText":"integral_constant","insertTextFormat":1,"kind":7,"label":"integral_constant<typename _Tp, _Tp __v>","score":3.8186695575714111,"sortText":"3f8b9aebintegral_constant","textEdit":{"newText":"integral_constant","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_abstract","filterText":"is_abstract","insertText":"is_abstract","insertTextFormat":1,"kind":7,"label":"is_abstract<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_abstract","textEdit":{"newText":"is_abstract","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_arithmetic","filterText":"is_arithmetic","insertText":"is_arithmetic","insertTextFormat":1,"kind":7,"label":"is_arithmetic<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_arithmetic","textEdit":{"newText":"is_arithmetic","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_array","filterText":"is_array","insertText":"is_array","insertTextFormat":1,"kind":7,"label":"is_array<typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_array","textEdit":{"newText":"is_array","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_assignable","filterText":"is_assignable","insertText":"is_assignable","insertTextFormat":1,"kind":7,"label":"is_assignable<typename _Tp, typename _Up>","score":3.8186695575714111,"sortText":"3f8b9aebis_assignable","textEdit":{"newText":"is_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_base_of","filterText":"is_base_of","insertText":"is_base_of","insertTextFormat":1,"kind":7,"label":"is_base_of<typename, typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_base_of","textEdit":{"newText":"is_base_of","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_compound","filterText":"is_compound","insertText":"is_compound","insertTextFormat":1,"kind":7,"label":"is_compound<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_compound","textEdit":{"newText":"is_compound","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_const","filterText":"is_const","insertText":"is_const","insertTextFormat":1,"kind":7,"label":"is_const<typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_const","textEdit":{"newText":"is_const","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_constructible","filterText":"is_constructible","insertText":"is_constructible","insertTextFormat":1,"kind":7,"label":"is_constructible<typename _Tp, typename _Args>","score":3.8186695575714111,"sortText":"3f8b9aebis_constructible","textEdit":{"newText":"is_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_convertible","filterText":"is_convertible","insertText":"is_convertible","insertTextFormat":1,"kind":7,"label":"is_convertible<typename _From, typename _To>","score":3.8186695575714111,"sortText":"3f8b9aebis_convertible","textEdit":{"newText":"is_convertible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_copy_assignable","filterText":"is_copy_assignable","insertText":"is_copy_assignable","insertTextFormat":1,"kind":7,"label":"is_copy_assignable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_copy_assignable","textEdit":{"newText":"is_copy_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_copy_constructible","filterText":"is_copy_constructible","insertText":"is_copy_constructible","insertTextFormat":1,"kind":7,"label":"is_copy_constructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_copy_constructible","textEdit":{"newText":"is_copy_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_default_constructible","filterText":"is_default_constructible","insertText":"is_default_constructible","insertTextFormat":1,"kind":7,"label":"is_default_constructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_default_constructible","textEdit":{"newText":"is_default_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_destructible","filterText":"is_destructible","insertText":"is_destructible","insertTextFormat":1,"kind":7,"label":"is_destructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_destructible","textEdit":{"newText":"is_destructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_empty","filterText":"is_empty","insertText":"is_empty","insertTextFormat":1,"kind":7,"label":"is_empty<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_empty","textEdit":{"newText":"is_empty","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_enum","filterText":"is_enum","insertText":"is_enum","insertTextFormat":1,"kind":7,"label":"is_enum<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_enum","textEdit":{"newText":"is_enum","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_final","filterText":"is_final","insertText":"is_final","insertTextFormat":1,"kind":7,"label":"is_final<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_final","textEdit":{"newText":"is_final","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_floating_point","filterText":"is_floating_point","insertText":"is_floating_point","insertTextFormat":1,"kind":7,"label":"is_floating_point<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_floating_point","textEdit":{"newText":"is_floating_point","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_function","filterText":"is_function","insertText":"is_function","insertTextFormat":1,"kind":7,"label":"is_function<typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_function","textEdit":{"newText":"is_function","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_fundamental","filterText":"is_fundamental","insertText":"is_fundamental","insertTextFormat":1,"kind":7,"label":"is_fundamental<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_fundamental","textEdit":{"newText":"is_fundamental","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_integral","filterText":"is_integral","insertText":"is_integral","insertTextFormat":1,"kind":7,"label":"is_integral<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_integral","textEdit":{"newText":"is_integral","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_literal_type","filterText":"is_literal_type","insertText":"is_literal_type","insertTextFormat":1,"kind":7,"label":"is_literal_type<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_literal_type","textEdit":{"newText":"is_literal_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_lvalue_reference","filterText":"is_lvalue_reference","insertText":"is_lvalue_reference","insertTextFormat":1,"kind":7,"label":"is_lvalue_reference<typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_lvalue_reference","textEdit":{"newText":"is_lvalue_reference","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_member_object_pointer","filterText":"is_member_object_pointer","insertText":"is_member_object_pointer","insertTextFormat":1,"kind":7,"label":"is_member_object_pointer<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_member_object_pointer","textEdit":{"newText":"is_member_object_pointer","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_move_assignable","filterText":"is_move_assignable","insertText":"is_move_assignable","insertTextFormat":1,"kind":7,"label":"is_move_assignable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_move_assignable","textEdit":{"newText":"is_move_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_assignable","filterText":"is_nothrow_assignable","insertText":"is_nothrow_assignable","insertTextFormat":1,"kind":7,"label":"is_nothrow_assignable<typename _Tp, typename _Up>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_assignable","textEdit":{"newText":"is_nothrow_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_constructible","filterText":"is_nothrow_constructible","insertText":"is_nothrow_constructible","insertTextFormat":1,"kind":7,"label":"is_nothrow_constructible<typename _Tp, typename _Args>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_constructible","textEdit":{"newText":"is_nothrow_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_copy_assignable","filterText":"is_nothrow_copy_assignable","insertText":"is_nothrow_copy_assignable","insertTextFormat":1,"kind":7,"label":"is_nothrow_copy_assignable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_copy_assignable","textEdit":{"newText":"is_nothrow_copy_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_copy_constructible","filterText":"is_nothrow_copy_constructible","insertText":"is_nothrow_copy_constructible","insertTextFormat":1,"kind":7,"label":"is_nothrow_copy_constructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_copy_constructible","textEdit":{"newText":"is_nothrow_copy_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_destructible","filterText":"is_nothrow_destructible","insertText":"is_nothrow_destructible","insertTextFormat":1,"kind":7,"label":"is_nothrow_destructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_destructible","textEdit":{"newText":"is_nothrow_destructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_move_assignable","filterText":"is_nothrow_move_assignable","insertText":"is_nothrow_move_assignable","insertTextFormat":1,"kind":7,"label":"is_nothrow_move_assignable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_move_assignable","textEdit":{"newText":"is_nothrow_move_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_move_constructible","filterText":"is_nothrow_move_constructible","insertText":"is_nothrow_move_constructible","insertTextFormat":1,"kind":7,"label":"is_nothrow_move_constructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_move_constructible","textEdit":{"newText":"is_nothrow_move_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_swappable","filterText":"is_nothrow_swappable","insertText":"is_nothrow_swappable","insertTextFormat":1,"kind":7,"label":"is_nothrow_swappable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_swappable","textEdit":{"newText":"is_nothrow_swappable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_swappable_v","filterText":"is_nothrow_swappable_v","insertText":"is_nothrow_swappable_v","insertTextFormat":1,"kind":6,"label":"is_nothrow_swappable_v<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_swappable_v","textEdit":{"newText":"is_nothrow_swappable_v","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_swappable_with","filterText":"is_nothrow_swappable_with","insertText":"is_nothrow_swappable_with","insertTextFormat":1,"kind":7,"label":"is_nothrow_swappable_with<typename _Tp, typename _Up>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_swappable_with","textEdit":{"newText":"is_nothrow_swappable_with","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_swappable_with_v","filterText":"is_nothrow_swappable_with_v","insertText":"is_nothrow_swappable_with_v","insertTextFormat":1,"kind":6,"label":"is_nothrow_swappable_with_v<typename _Tp, typename _Up>","score":3.8186695575714111,"sortText":"3f8b9aebis_nothrow_swappable_with_v","textEdit":{"newText":"is_nothrow_swappable_with_v","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_null_pointer (LWG 2247).","filterText":"is_null_pointer","insertText":"is_null_pointer","insertTextFormat":1,"kind":7,"label":"is_null_pointer<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_null_pointer","textEdit":{"newText":"is_null_pointer","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_object","filterText":"is_object","insertText":"is_object","insertTextFormat":1,"kind":7,"label":"is_object<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_object","textEdit":{"newText":"is_object","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_pod\nCould use is_standard_layout && is_trivial instead of the builtin.","filterText":"is_pod","insertText":"is_pod","insertTextFormat":1,"kind":7,"label":"is_pod<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_pod","textEdit":{"newText":"is_pod","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_pointer","filterText":"is_pointer","insertText":"is_pointer","insertTextFormat":1,"kind":7,"label":"is_pointer<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_pointer","textEdit":{"newText":"is_pointer","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_reference","filterText":"is_reference","insertText":"is_reference","insertTextFormat":1,"kind":7,"label":"is_reference<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_reference","textEdit":{"newText":"is_reference","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_rvalue_reference","filterText":"is_rvalue_reference","insertText":"is_rvalue_reference","insertTextFormat":1,"kind":7,"label":"is_rvalue_reference<typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_rvalue_reference","textEdit":{"newText":"is_rvalue_reference","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_same","filterText":"is_same","insertText":"is_same","insertTextFormat":1,"kind":7,"label":"is_same<typename, typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_same","textEdit":{"newText":"is_same","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_signed","filterText":"is_signed","insertText":"is_signed","insertTextFormat":1,"kind":7,"label":"is_signed<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_signed","textEdit":{"newText":"is_signed","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_standard_layout","filterText":"is_standard_layout","insertText":"is_standard_layout","insertTextFormat":1,"kind":7,"label":"is_standard_layout<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_standard_layout","textEdit":{"newText":"is_standard_layout","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_swappable","filterText":"is_swappable","insertText":"is_swappable","insertTextFormat":1,"kind":7,"label":"is_swappable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_swappable","textEdit":{"newText":"is_swappable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_swappable_with","filterText":"is_swappable_with","insertText":"is_swappable_with","insertTextFormat":1,"kind":7,"label":"is_swappable_with<typename _Tp, typename _Up>","score":3.8186695575714111,"sortText":"3f8b9aebis_swappable_with","textEdit":{"newText":"is_swappable_with","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_swappable_with_v","filterText":"is_swappable_with_v","insertText":"is_swappable_with_v","insertTextFormat":1,"kind":6,"label":"is_swappable_with_v<typename _Tp, typename _Up>","score":3.8186695575714111,"sortText":"3f8b9aebis_swappable_with_v","textEdit":{"newText":"is_swappable_with_v","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivial","filterText":"is_trivial","insertText":"is_trivial","insertTextFormat":1,"kind":7,"label":"is_trivial<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivial","textEdit":{"newText":"is_trivial","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_constructible","filterText":"is_trivially_constructible","insertText":"is_trivially_constructible","insertTextFormat":1,"kind":7,"label":"is_trivially_constructible<typename _Tp, typename _Args>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_constructible","textEdit":{"newText":"is_trivially_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_copy_assignable","filterText":"is_trivially_copy_assignable","insertText":"is_trivially_copy_assignable","insertTextFormat":1,"kind":7,"label":"is_trivially_copy_assignable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_copy_assignable","textEdit":{"newText":"is_trivially_copy_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_copy_constructible","filterText":"is_trivially_copy_constructible","insertText":"is_trivially_copy_constructible","insertTextFormat":1,"kind":7,"label":"is_trivially_copy_constructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_copy_constructible","textEdit":{"newText":"is_trivially_copy_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_copyable","filterText":"is_trivially_copyable","insertText":"is_trivially_copyable","insertTextFormat":1,"kind":7,"label":"is_trivially_copyable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_copyable","textEdit":{"newText":"is_trivially_copyable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_default_constructible","filterText":"is_trivially_default_constructible","insertText":"is_trivially_default_constructible","insertTextFormat":1,"kind":7,"label":"is_trivially_default_constructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_default_constructible","textEdit":{"newText":"is_trivially_default_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_destructible","filterText":"is_trivially_destructible","insertText":"is_trivially_destructible","insertTextFormat":1,"kind":7,"label":"is_trivially_destructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_destructible","textEdit":{"newText":"is_trivially_destructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_move_assignable","filterText":"is_trivially_move_assignable","insertText":"is_trivially_move_assignable","insertTextFormat":1,"kind":7,"label":"is_trivially_move_assignable<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_move_assignable","textEdit":{"newText":"is_trivially_move_assignable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_trivially_move_constructible","filterText":"is_trivially_move_constructible","insertText":"is_trivially_move_constructible","insertTextFormat":1,"kind":7,"label":"is_trivially_move_constructible<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_trivially_move_constructible","textEdit":{"newText":"is_trivially_move_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_union","filterText":"is_union","insertText":"is_union","insertTextFormat":1,"kind":7,"label":"is_union<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_union","textEdit":{"newText":"is_union","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_unsigned","filterText":"is_unsigned","insertText":"is_unsigned","insertTextFormat":1,"kind":7,"label":"is_unsigned<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_unsigned","textEdit":{"newText":"is_unsigned","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_void","filterText":"is_void","insertText":"is_void","insertTextFormat":1,"kind":7,"label":"is_void<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebis_void","textEdit":{"newText":"is_void","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_volatile","filterText":"is_volatile","insertText":"is_volatile","insertTextFormat":1,"kind":7,"label":"is_volatile<typename>","score":3.8186695575714111,"sortText":"3f8b9aebis_volatile","textEdit":{"newText":"is_volatile","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for make_signed","filterText":"make_signed_t","insertText":"make_signed_t","insertTextFormat":1,"kind":8,"label":"make_signed_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebmake_signed_t","textEdit":{"newText":"make_signed_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Given an integral/enum type, return the corresponding unsigned\ninteger type.\nPrimary template.\n make_unsigned","filterText":"make_unsigned","insertText":"make_unsigned","insertTextFormat":1,"kind":7,"label":"make_unsigned<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebmake_unsigned","textEdit":{"newText":"make_unsigned","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for make_unsigned","filterText":"make_unsigned_t","insertText":"make_unsigned_t","insertTextFormat":1,"kind":8,"label":"make_unsigned_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebmake_unsigned_t","textEdit":{"newText":"make_unsigned_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<new>","documentation":"If you write your own error handler to be called by @c new, it must\nbe of this type.  ","filterText":"new_handler","insertText":"new_handler","insertTextFormat":1,"kind":8,"label":"new_handler","score":3.8186695575714111,"sortText":"3f8b9aebnew_handler","textEdit":{"newText":"new_handler","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"const nothrow_t\n<new>","filterText":"nothrow","insertText":"nothrow","insertTextFormat":1,"kind":6,"label":"nothrow","score":3.8186695575714111,"sortText":"3f8b9aebnothrow","textEdit":{"newText":"nothrow","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<new>","filterText":"nothrow_t","insertText":"nothrow_t","insertTextFormat":1,"kind":7,"label":"nothrow_t","score":3.8186695575714111,"sortText":"3f8b9aebnothrow_t","textEdit":{"newText":"nothrow_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"rank","filterText":"rank","insertText":"rank","insertTextFormat":1,"kind":7,"label":"rank<typename>","score":3.8186695575714111,"sortText":"3f8b9aebrank","textEdit":{"newText":"rank","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<functional>","filterText":"reference_wrapper","insertText":"reference_wrapper","insertTextFormat":1,"kind":7,"label":"reference_wrapper<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebreference_wrapper","textEdit":{"newText":"reference_wrapper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"remove_all_extents","filterText":"remove_all_extents","insertText":"remove_all_extents","insertTextFormat":1,"kind":7,"label":"remove_all_extents<typename>","score":3.8186695575714111,"sortText":"3f8b9aebremove_all_extents","textEdit":{"newText":"remove_all_extents","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for remove_all_extents","filterText":"remove_all_extents_t","insertText":"remove_all_extents_t","insertTextFormat":1,"kind":8,"label":"remove_all_extents_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_all_extents_t","textEdit":{"newText":"remove_all_extents_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"remove_const","filterText":"remove_const","insertText":"remove_const","insertTextFormat":1,"kind":7,"label":"remove_const<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_const","textEdit":{"newText":"remove_const","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for remove_const","filterText":"remove_const_t","insertText":"remove_const_t","insertTextFormat":1,"kind":8,"label":"remove_const_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_const_t","textEdit":{"newText":"remove_const_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Primary type categories.","filterText":"remove_cv","insertText":"remove_cv","insertTextFormat":1,"kind":7,"label":"remove_cv<typename>","score":3.8186695575714111,"sortText":"3f8b9aebremove_cv","textEdit":{"newText":"remove_cv","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for remove_cv","filterText":"remove_cv_t","insertText":"remove_cv_t","insertTextFormat":1,"kind":8,"label":"remove_cv_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_cv_t","textEdit":{"newText":"remove_cv_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"remove_extent","filterText":"remove_extent","insertText":"remove_extent","insertTextFormat":1,"kind":7,"label":"remove_extent<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_extent","textEdit":{"newText":"remove_extent","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for remove_extent","filterText":"remove_extent_t","insertText":"remove_extent_t","insertTextFormat":1,"kind":8,"label":"remove_extent_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_extent_t","textEdit":{"newText":"remove_extent_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"remove_pointer","filterText":"remove_pointer","insertText":"remove_pointer","insertTextFormat":1,"kind":7,"label":"remove_pointer<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_pointer","textEdit":{"newText":"remove_pointer","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for remove_pointer","filterText":"remove_pointer_t","insertText":"remove_pointer_t","insertTextFormat":1,"kind":8,"label":"remove_pointer_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_pointer_t","textEdit":{"newText":"remove_pointer_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"remove_reference","filterText":"remove_reference","insertText":"remove_reference","insertTextFormat":1,"kind":7,"label":"remove_reference<typename>","score":3.8186695575714111,"sortText":"3f8b9aebremove_reference","textEdit":{"newText":"remove_reference","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for remove_reference","filterText":"remove_reference_t","insertText":"remove_reference_t","insertTextFormat":1,"kind":8,"label":"remove_reference_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_reference_t","textEdit":{"newText":"remove_reference_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for remove_volatile","filterText":"remove_volatile_t","insertText":"remove_volatile_t","insertTextFormat":1,"kind":8,"label":"remove_volatile_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebremove_volatile_t","textEdit":{"newText":"remove_volatile_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <new>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"new_handler\n<new>","documentation":"Takes a replacement handler as the argument, returns the\nprevious handler.","filterText":"set_new_handler","insertText":"set_new_handler","insertTextFormat":1,"kind":3,"label":"set_new_handler(new_handler)","score":3.8186695575714111,"sortText":"3f8b9aebset_new_handler","textEdit":{"newText":"set_new_handler","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"terminate_handler\n<exception>","documentation":"Takes a new handler function as an argument, returns the old function.","filterText":"set_terminate","insertText":"set_terminate","insertTextFormat":1,"kind":3,"label":"set_terminate(terminate_handler)","score":3.8186695575714111,"sortText":"3f8b9aebset_terminate","textEdit":{"newText":"set_terminate","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"unexpected_handler\n<exception>","documentation":"Takes a new handler function as an argument, returns the old function.","filterText":"set_unexpected","insertText":"set_unexpected","insertTextFormat":1,"kind":3,"label":"set_unexpected(unexpected_handler)","score":3.8186695575714111,"sortText":"3f8b9aebset_unexpected","textEdit":{"newText":"set_unexpected","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<type_traits>","filterText":"swap","insertText":"swap","insertTextFormat":1,"kind":3,"label":"swap(\u2026)","score":3.8186695575714111,"sortText":"3f8b9aebswap","textEdit":{"newText":"swap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<exception>","documentation":"The runtime will call this function if %exception handling must be\nabandoned for any reason.  It can also be called by the user.  ","filterText":"terminate","insertText":"terminate","insertTextFormat":1,"kind":3,"label":"terminate()","score":3.8186695575714111,"sortText":"3f8b9aebterminate","textEdit":{"newText":"terminate","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<exception>","documentation":"If you write a replacement %terminate handler, it must be of this type.","filterText":"terminate_handler","insertText":"terminate_handler","insertTextFormat":1,"kind":8,"label":"terminate_handler","score":3.8186695575714111,"sortText":"3f8b9aebterminate_handler","textEdit":{"newText":"terminate_handler","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"The type used as a compile-time boolean with true value.","filterText":"true_type","insertText":"true_type","insertTextFormat":1,"kind":8,"label":"true_type","score":3.8186695575714111,"sortText":"3f8b9aebtrue_type","textEdit":{"newText":"true_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <tuple>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<tuple>","documentation":"Forward declarations.","filterText":"tuple","insertText":"tuple","insertTextFormat":1,"kind":7,"label":"tuple<typename _Elements>","score":3.8186695575714111,"sortText":"3f8b9aebtuple","textEdit":{"newText":"tuple","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cstdint>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cstdint>","filterText":"uint_least16_t","insertText":"uint_least16_t","insertTextFormat":1,"kind":8,"label":"uint_least16_t","score":3.8186695575714111,"sortText":"3f8b9aebuint_least16_t","textEdit":{"newText":"uint_least16_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cstdint>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cstdint>","filterText":"uint_least32_t","insertText":"uint_least32_t","insertTextFormat":1,"kind":8,"label":"uint_least32_t","score":3.8186695575714111,"sortText":"3f8b9aebuint_least32_t","textEdit":{"newText":"uint_least32_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<exception>","documentation":"[18.6.4]/1:  'Returns true after completing evaluation of a\nthrow-expression until either completing initialization of the\nexception-declaration in the matching handler or entering @c unexpected()\ndue to the throw; or after entering @c terminate() for any reason\nother than an explicit call to @c terminate().  [Note: This includes\nstack unwinding [15.2].  end note]'\n\n2: 'When @c uncaught_exception() is true, throwing an\n%exception can result in a call of @c terminate()\n(15.5.1).'","filterText":"uncaught_exception","insertText":"uncaught_exception","insertTextFormat":1,"kind":3,"label":"uncaught_exception()","score":3.8186695575714111,"sortText":"3f8b9aebuncaught_exception","textEdit":{"newText":"uncaught_exception","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<exception>","documentation":"The number of uncaught exceptions.","filterText":"uncaught_exceptions","insertText":"uncaught_exceptions","insertTextFormat":1,"kind":3,"label":"uncaught_exceptions()","score":3.8186695575714111,"sortText":"3f8b9aebuncaught_exceptions","textEdit":{"newText":"uncaught_exceptions","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"The underlying type of an enum.","filterText":"underlying_type","insertText":"underlying_type","insertTextFormat":1,"kind":7,"label":"underlying_type<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebunderlying_type","textEdit":{"newText":"underlying_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Alias template for underlying_type","filterText":"underlying_type_t","insertText":"underlying_type_t","insertTextFormat":1,"kind":8,"label":"underlying_type_t<typename _Tp>","score":3.8186695575714111,"sortText":"3f8b9aebunderlying_type_t","textEdit":{"newText":"underlying_type_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<exception>","documentation":"The runtime will call this function if an %exception is thrown which\nviolates the function's %exception specification.  ","filterText":"unexpected","insertText":"unexpected","insertTextFormat":1,"kind":3,"label":"unexpected()","score":3.8186695575714111,"sortText":"3f8b9aebunexpected","textEdit":{"newText":"unexpected","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<exception>","documentation":"If you write a replacement %unexpected handler, it must be of this type.","filterText":"unexpected_handler","insertText":"unexpected_handler","insertTextFormat":1,"kind":8,"label":"unexpected_handler","score":3.8186695575714111,"sortText":"3f8b9aebunexpected_handler","textEdit":{"newText":"unexpected_handler","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","documentation":"\n  @brief A generalization of pointer arithmetic.\n  @param  __i  An input iterator.\n  @param  __n  The @a delta by which to change @p __i.\n  @return  Nothing.\n\n  This increments @p i by @p n.  For bidirectional and random access\n  iterators, @p __n may be negative, in which case @p __i is decremented.\n\n  For random access iterators, this uses their @c + and @c - operations\n  and are constant time.  For other %iterator classes they are linear time.\n  ","filterText":"advance","insertText":"advance","insertTextFormat":1,"kind":3,"label":"advance(_InputIterator &__i, _Distance __n)","score":3.525254487991333,"sortText":"3f9e623badvance","textEdit":{"newText":"advance","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"\n @brief  Uniform interface to all allocator types.\n @ingroup allocators\n  ","filterText":"allocator_traits","insertText":"allocator_traits","insertTextFormat":1,"kind":7,"label":"allocator_traits<typename _Alloc>","score":3.525254487991333,"sortText":"3f9e623ballocator_traits","textEdit":{"newText":"allocator_traits","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"24.4.2.2.1 back_insert_iterator\n\n @brief  Turns assignment into insertion.\n\n These are output iterators, constructed from a container-of-T.\n Assigning a T to the iterator appends it to the container using\n push_back.\n\n Tip:  Using the back_inserter function to create these iterators can\n save typing.","filterText":"back_insert_iterator","insertText":"back_insert_iterator","insertTextFormat":1,"kind":7,"label":"back_insert_iterator<typename _Container>","score":3.525254487991333,"sortText":"3f9e623bback_insert_iterator","textEdit":{"newText":"back_insert_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"back_insert_iterator<_Container>\n<iterator>","documentation":"\n  @param  __x  A container of arbitrary type.\n  @return  An instance of back_insert_iterator working on @p __x.\n\n  This wrapper function helps in creating back_insert_iterator instances.\n  Typing the name of the %iterator requires knowing the precise full\n  type of the container, which can be tedious and impedes generic\n  programming.  Using this function lets you take advantage of automatic\n  template parameter deduction, making the compiler match the correct\n  types for you.\n  ","filterText":"back_inserter","insertText":"back_inserter","insertTextFormat":1,"kind":3,"label":"back_inserter(_Container &__x)","score":3.525254487991333,"sortText":"3f9e623bback_inserter","textEdit":{"newText":"back_inserter","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"Bidirectional iterators support a superset of forward iterator\noperations.","filterText":"bidirectional_iterator_tag","insertText":"bidirectional_iterator_tag","insertTextFormat":1,"kind":7,"label":"bidirectional_iterator_tag","score":3.525254487991333,"sortText":"3f9e623bbidirectional_iterator_tag","textEdit":{"newText":"bidirectional_iterator_tag","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","documentation":"\n  @brief A generalization of pointer arithmetic.\n  @param  __first  An input iterator.\n  @param  __last  An input iterator.\n  @return  The distance between them.\n\n  Returns @c n such that __first + n == __last.  This requires\n  that @p __last must be reachable from @p __first.  Note that @c\n  n may be negative.\n\n  For random access iterators, this uses their @c + and @c - operations\n  and are constant time.  For other %iterator classes they are linear time.\n  ","filterText":"distance","insertText":"distance","insertTextFormat":1,"kind":3,"label":"distance(_InputIterator __first, _InputIterator __last)","score":3.525254487991333,"sortText":"3f9e623bdistance","textEdit":{"newText":"distance","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<exception>","documentation":"\n  @brief Base class for all library exceptions.\n\n  This is the base class for all exceptions thrown by the standard\n  library, and by certain language expressions.  You are free to derive\n  your own %exception classes, or use a different hierarchy, or to\n  throw non-class data (e.g., fundamental types).\n   ","filterText":"exception","insertText":"exception","insertTextFormat":1,"kind":7,"label":"exception","score":3.525254487991333,"sortText":"3f9e623bexception","textEdit":{"newText":"exception","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<utility>","documentation":"\n  @brief  Forward an lvalue.\n  @return The parameter cast to the specified type.\n\n  This function is used to implement \"perfect forwarding\".\n   ","filterText":"forward","insertText":"forward","insertTextFormat":1,"kind":3,"label":"forward(\u2026)","score":3.525254487991333,"sortText":"3f9e623bforward","textEdit":{"newText":"forward","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"Forward iterators support a superset of input iterator operations.","filterText":"forward_iterator_tag","insertText":"forward_iterator_tag","insertTextFormat":1,"kind":7,"label":"forward_iterator_tag","score":3.525254487991333,"sortText":"3f9e623bforward_iterator_tag","textEdit":{"newText":"forward_iterator_tag","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"\n  @brief  Turns assignment into insertion.\n\n  These are output iterators, constructed from a container-of-T.\n  Assigning a T to the iterator prepends it to the container using\n  push_front.\n\n  Tip:  Using the front_inserter function to create these iterators can\n  save typing.\n  ","filterText":"front_insert_iterator","insertText":"front_insert_iterator","insertTextFormat":1,"kind":7,"label":"front_insert_iterator<typename _Container>","score":3.525254487991333,"sortText":"3f9e623bfront_insert_iterator","textEdit":{"newText":"front_insert_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"front_insert_iterator<_Container>\n<iterator>","documentation":"\n  @param  __x  A container of arbitrary type.\n  @return  An instance of front_insert_iterator working on @p x.\n\n  This wrapper function helps in creating front_insert_iterator instances.\n  Typing the name of the %iterator requires knowing the precise full\n  type of the container, which can be tedious and impedes generic\n  programming.  Using this function lets you take advantage of automatic\n  template parameter deduction, making the compiler match the correct\n  types for you.\n  ","filterText":"front_inserter","insertText":"front_inserter","insertTextFormat":1,"kind":3,"label":"front_inserter(_Container &__x)","score":3.525254487991333,"sortText":"3f9e623bfront_inserter","textEdit":{"newText":"front_inserter","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<functional>","documentation":"Primary class template hash.","filterText":"hash","insertText":"hash","insertTextFormat":1,"kind":7,"label":"hash<typename _Tp>","score":3.525254487991333,"sortText":"3f9e623bhash","textEdit":{"newText":"hash","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"\n  @brief  Turns assignment into insertion.\n\n  These are output iterators, constructed from a container-of-T.\n  Assigning a T to the iterator inserts it in the container at the\n  %iterator's position, rather than overwriting the value at that\n  position.\n\n  (Sequences will actually insert a @e copy of the value before the\n  %iterator's position.)\n\n  Tip:  Using the inserter function to create these iterators can\n  save typing.\n  ","filterText":"insert_iterator","insertText":"insert_iterator","insertTextFormat":1,"kind":7,"label":"insert_iterator<typename _Container>","score":3.525254487991333,"sortText":"3f9e623binsert_iterator","textEdit":{"newText":"insert_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"insert_iterator<_Container>\n<iterator>","documentation":"\n  @param __x  A container of arbitrary type.\n  @return  An instance of insert_iterator working on @p __x.\n\n  This wrapper function helps in creating insert_iterator instances.\n  Typing the name of the %iterator requires knowing the precise full\n  type of the container, which can be tedious and impedes generic\n  programming.  Using this function lets you take advantage of automatic\n  template parameter deduction, making the compiler match the correct\n  types for you.\n  ","filterText":"inserter","insertText":"inserter","insertTextFormat":1,"kind":3,"label":"inserter(_Container &__x, _Iterator __i)","score":3.525254487991333,"sortText":"3f9e623binserter","textEdit":{"newText":"inserter","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"\n  @brief  Common %iterator class.\n\n  This class does nothing but define nested typedefs.  %Iterator classes\n  can inherit from this class to save some work.  The typedefs are then\n  used in specializations and overloading.\n\n  In particular, there are no default implementations of requirements\n  such as @c operator++ and the like.  (How could there be?)\n  ","filterText":"iterator","insertText":"iterator","insertTextFormat":1,"kind":7,"label":"iterator<typename _Category, typename _Tp, typename _Distance, typename _Pointer, typename _Reference>","score":3.525254487991333,"sortText":"3f9e623biterator","textEdit":{"newText":"iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","filterText":"iterator_traits","insertText":"iterator_traits","insertTextFormat":1,"kind":7,"label":"iterator_traits<typename _Iterator>","score":3.525254487991333,"sortText":"3f9e623biterator_traits","textEdit":{"newText":"iterator_traits","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"exception_ptr\n<exception>","documentation":"Obtain an exception_ptr pointing to a copy of the supplied object.","filterText":"make_exception_ptr","insertText":"make_exception_ptr","insertTextFormat":1,"kind":3,"label":"make_exception_ptr(_Ex)","score":3.525254487991333,"sortText":"3f9e623bmake_exception_ptr","textEdit":{"newText":"make_exception_ptr","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","filterText":"make_move_iterator","insertText":"make_move_iterator","insertTextFormat":1,"kind":3,"label":"make_move_iterator(int __i)","score":3.525254487991333,"sortText":"3f9e623bmake_move_iterator","textEdit":{"newText":"make_move_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"pair<typename __decay_and_strip<_T1>::__type, typename __decay_and_strip<_T2>::__type>\n<utility>","documentation":"NB: DR 706.","filterText":"make_pair","insertText":"make_pair","insertTextFormat":1,"kind":3,"label":"make_pair(_T1 &&__x, _T2 &&__y)","score":3.525254487991333,"sortText":"3f9e623bmake_pair","textEdit":{"newText":"make_pair","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"typename std::remove_reference<_Tp>::type &&\n<utility>","documentation":"\n  @brief  Convert a value to an rvalue.\n  @param  __t  A thing of arbitrary type.\n  @return The parameter cast to an rvalue-reference to allow moving it.\n  ","filterText":"move","insertText":"move","insertTextFormat":1,"kind":3,"label":"move(_Tp &&__t)","score":3.525254487991333,"sortText":"3f9e623bmove","textEdit":{"newText":"move","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"24.4.3  Move iterators\n\n Class template move_iterator is an iterator adapter with the same\n behavior as the underlying iterator except that its dereference\n operator implicitly converts the value returned by the underlying\n iterator's dereference operator to an rvalue reference.  Some\n generic algorithms can be called with move iterators to replace\n copying with moving.","filterText":"move_iterator","insertText":"move_iterator","insertTextFormat":1,"kind":7,"label":"move_iterator<typename _Iterator>","score":3.525254487991333,"sortText":"3f9e623bmove_iterator","textEdit":{"newText":"move_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<exception>","documentation":"Exception class with exception_ptr data member.","filterText":"nested_exception","insertText":"nested_exception","insertTextFormat":1,"kind":7,"label":"nested_exception","score":3.525254487991333,"sortText":"3f9e623bnested_exception","textEdit":{"newText":"nested_exception","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","filterText":"next","insertText":"next","insertTextFormat":1,"kind":3,"label":"next(int __x, int difference_type)","score":3.525254487991333,"sortText":"3f9e623bnext","textEdit":{"newText":"next","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cstddef>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cstddef>","filterText":"nullptr_t","insertText":"nullptr_t","insertTextFormat":1,"kind":8,"label":"nullptr_t","score":3.525254487991333,"sortText":"3f9e623bnullptr_t","textEdit":{"newText":"nullptr_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[4 overloads]\n<iterator>","filterText":"operator!=","insertText":"operator!=","insertTextFormat":1,"kind":3,"label":"operator!=(\u2026)","score":3.525254487991333,"sortText":"3f9e623boperator!=","textEdit":{"newText":"operator!=","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<iterator>","documentation":"DR 685.","filterText":"operator-","insertText":"operator-","insertTextFormat":1,"kind":3,"label":"operator-(\u2026)","score":3.525254487991333,"sortText":"3f9e623boperator-","textEdit":{"newText":"operator-","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<iterator>","filterText":"operator<","insertText":"operator<","insertTextFormat":1,"kind":3,"label":"operator<(\u2026)","score":3.525254487991333,"sortText":"3f9e623boperator<","textEdit":{"newText":"operator<","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<utility>","documentation":"<http://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>","filterText":"operator<","insertText":"operator<","insertTextFormat":1,"kind":3,"label":"operator<(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)","score":3.525254487991333,"sortText":"3f9e623boperator<","textEdit":{"newText":"operator<","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<utility>","documentation":"Uses @c operator< to find the result.","filterText":"operator<=","insertText":"operator<=","insertTextFormat":1,"kind":3,"label":"operator<=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)","score":3.525254487991333,"sortText":"3f9e623boperator<=","textEdit":{"newText":"operator<=","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<iterator>","filterText":"operator<=","insertText":"operator<=","insertTextFormat":1,"kind":3,"label":"operator<=(\u2026)","score":3.525254487991333,"sortText":"3f9e623boperator<=","textEdit":{"newText":"operator<=","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<iterator>","documentation":"@{\n\n  @param  __x  A %reverse_iterator.\n  @param  __y  A %reverse_iterator.\n  @return  A simple bool.\n\n  Reverse iterators forward many operations to their underlying base()\n  iterators.  Others are implemented in terms of one another.","filterText":"operator==","insertText":"operator==","insertTextFormat":1,"kind":3,"label":"operator==(\u2026)","score":3.525254487991333,"sortText":"3f9e623boperator==","textEdit":{"newText":"operator==","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<utility>","documentation":"Two pairs of the same type are equal iff their members are equal.","filterText":"operator==","insertText":"operator==","insertTextFormat":1,"kind":3,"label":"operator==(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)","score":3.525254487991333,"sortText":"3f9e623boperator==","textEdit":{"newText":"operator==","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<utility>","documentation":"Uses @c operator< to find the result.","filterText":"operator>","insertText":"operator>","insertTextFormat":1,"kind":3,"label":"operator>(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)","score":3.525254487991333,"sortText":"3f9e623boperator>","textEdit":{"newText":"operator>","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<iterator>","filterText":"operator>","insertText":"operator>","insertTextFormat":1,"kind":3,"label":"operator>(\u2026)","score":3.525254487991333,"sortText":"3f9e623boperator>","textEdit":{"newText":"operator>","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<iterator>","filterText":"operator>=","insertText":"operator>=","insertTextFormat":1,"kind":3,"label":"operator>=(\u2026)","score":3.525254487991333,"sortText":"3f9e623boperator>=","textEdit":{"newText":"operator>=","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<utility>","documentation":"Uses @c operator< to find the result.","filterText":"operator>=","insertText":"operator>=","insertTextFormat":1,"kind":3,"label":"operator>=(const pair<_T1, _T2> &__x, const pair<_T1, _T2> &__y)","score":3.525254487991333,"sortText":"3f9e623boperator>=","textEdit":{"newText":"operator>=","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"Marking output iterators.","filterText":"output_iterator_tag","insertText":"output_iterator_tag","insertTextFormat":1,"kind":7,"label":"output_iterator_tag","score":3.525254487991333,"sortText":"3f9e623boutput_iterator_tag","textEdit":{"newText":"output_iterator_tag","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<utility>","documentation":"\n  @brief Struct holding two objects of arbitrary type.\n\n  @tparam _T1  Type of first object.\n  @tparam _T2  Type of second object.\n   ","filterText":"pair","insertText":"pair","insertTextFormat":1,"kind":7,"label":"pair<typename _T1, typename _T2>","score":3.525254487991333,"sortText":"3f9e623bpair","textEdit":{"newText":"pair","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<utility>","documentation":"piecewise_construct_t","filterText":"piecewise_construct_t","insertText":"piecewise_construct_t","insertTextFormat":1,"kind":7,"label":"piecewise_construct_t","score":3.525254487991333,"sortText":"3f9e623bpiecewise_construct_t","textEdit":{"newText":"piecewise_construct_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"\n @brief  Uniform interface to all pointer-like types\n @ingroup pointer_abstractions\n  ","filterText":"pointer_traits","insertText":"pointer_traits","insertTextFormat":1,"kind":7,"label":"pointer_traits<typename _Ptr>","score":3.525254487991333,"sortText":"3f9e623bpointer_traits","textEdit":{"newText":"pointer_traits","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","filterText":"prev","insertText":"prev","insertTextFormat":1,"kind":3,"label":"prev(int __x, int difference_type)","score":3.525254487991333,"sortText":"3f9e623bprev","textEdit":{"newText":"prev","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"Random-access iterators support a superset of bidirectional\niterator operations.","filterText":"random_access_iterator_tag","insertText":"random_access_iterator_tag","insertTextFormat":1,"kind":7,"label":"random_access_iterator_tag","score":3.525254487991333,"sortText":"3f9e623brandom_access_iterator_tag","textEdit":{"newText":"random_access_iterator_tag","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<exception>","documentation":"Throw the object pointed to by the exception_ptr.","filterText":"rethrow_exception","insertText":"rethrow_exception","insertTextFormat":1,"kind":3,"label":"rethrow_exception(exception_ptr)","score":3.525254487991333,"sortText":"3f9e623brethrow_exception","textEdit":{"newText":"rethrow_exception","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<exception>","documentation":"If @p __ex is derived from nested_exception, @p __ex.rethrow_nested().","filterText":"rethrow_if_nested","insertText":"rethrow_if_nested","insertTextFormat":1,"kind":3,"label":"rethrow_if_nested(const _Ex &__ex)","score":3.525254487991333,"sortText":"3f9e623brethrow_if_nested","textEdit":{"newText":"rethrow_if_nested","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"24.4.1 Reverse iterators\n\n Bidirectional and random access iterators have corresponding reverse\n %iterator adaptors that iterate through the data structure in the\n opposite direction.  They have the same signatures as the corresponding\n iterators.  The fundamental relation between a reverse %iterator and its\n corresponding %iterator @c i is established by the identity:\n @code\n     &*(reverse_iterator(i)) == &*(i - 1)\n @endcode\n\n <em>This mapping is dictated by the fact that while there is always a\n pointer past the end of an array, there might not be a valid pointer\n before the beginning of an array.</em> [24.4.1]/1,2\n\n Reverse iterators can be tricky and surprising at first.  Their\n semantics make sense, however, and the trickiness is a side effect of\n the requirement that the iterators must be safe.","filterText":"reverse_iterator","insertText":"reverse_iterator","insertTextFormat":1,"kind":7,"label":"reverse_iterator<typename _Iterator>","score":3.525254487991333,"sortText":"3f9e623breverse_iterator","textEdit":{"newText":"reverse_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <c++/4.8.2/x86_64-redhat-linux/bits/c++config.h>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<c++/4.8.2/x86_64-redhat-linux/bits/c++config.h>","filterText":"size_t","insertText":"size_t","insertTextFormat":1,"kind":8,"label":"size_t","score":3.525254487991333,"sortText":"3f9e623bsize_t","textEdit":{"newText":"size_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<utility>","documentation":"See std::pair::swap().\nNote:  no std::swap overloads in C++03 mode, this has performance\n      implications, see, eg, libstdc++/38466.","filterText":"swap","insertText":"swap","insertTextFormat":1,"kind":3,"label":"swap(pair<_T1, _T2> &__x, pair<_T1, _T2> &__y)","score":3.525254487991333,"sortText":"3f9e623bswap","textEdit":{"newText":"swap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<exception>","documentation":"If @p __t is derived from nested_exception, throws @p __t.\nElse, throws an implementation-defined object derived from both.","filterText":"throw_with_nested","insertText":"throw_with_nested","insertTextFormat":1,"kind":3,"label":"throw_with_nested(_Tp &&__t)","score":3.525254487991333,"sortText":"3f9e623bthrow_with_nested","textEdit":{"newText":"throw_with_nested","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"Declare uses_allocator so it can be specialized in \\<queue\\> etc.","filterText":"uses_allocator","insertText":"uses_allocator","insertTextFormat":1,"kind":7,"label":"uses_allocator<typename, typename>","score":3.525254487991333,"sortText":"3f9e623buses_allocator","textEdit":{"newText":"uses_allocator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<exception>","filterText":"exception_ptr","insertText":"exception_ptr","insertTextFormat":1,"kind":18,"label":"exception_ptr","score":3.2047767639160156,"sortText":"3fb2e4f0exception_ptr","textEdit":{"newText":"exception_ptr","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_domain_error","insertText":"__throw_domain_error","insertTextFormat":1,"kind":3,"label":"__throw_domain_error(const char *)","score":0.52878820896148682,"sortText":"40f8a156__throw_domain_error","textEdit":{"newText":"__throw_domain_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"\n<vector>","filterText":"_Bit_const_iterator","insertText":"_Bit_const_iterator","insertTextFormat":1,"kind":7,"label":"_Bit_const_iterator","score":0.41770476102828979,"sortText":"412a229a_Bit_const_iterator","textEdit":{"newText":"_Bit_const_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"\n<vector>","filterText":"_Bit_iterator","insertText":"_Bit_iterator","insertTextFormat":1,"kind":7,"label":"_Bit_iterator","score":0.41770476102828979,"sortText":"412a229a_Bit_iterator","textEdit":{"newText":"_Bit_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"\n<vector>","filterText":"_Bit_iterator_base","insertText":"_Bit_iterator_base","insertTextFormat":1,"kind":7,"label":"_Bit_iterator_base","score":0.41770476102828979,"sortText":"412a229a_Bit_iterator_base","textEdit":{"newText":"_Bit_iterator_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"\n<vector>","filterText":"_Bit_reference","insertText":"_Bit_reference","insertTextFormat":1,"kind":7,"label":"_Bit_reference","score":0.41770476102828979,"sortText":"412a229a_Bit_reference","textEdit":{"newText":"_Bit_reference","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"\n<vector>","filterText":"_Bit_type","insertText":"_Bit_type","insertTextFormat":1,"kind":8,"label":"_Bit_type","score":0.41770476102828979,"sortText":"412a229a_Bit_type","textEdit":{"newText":"_Bit_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <deque>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<deque>","filterText":"_Construct","insertText":"_Construct","insertTextFormat":1,"kind":3,"label":"_Construct(_T1 *__p, _Args &&__args...)","score":0.41770476102828979,"sortText":"412a229a_Construct","textEdit":{"newText":"_Construct","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <deque>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<deque>","filterText":"_Construct_novalue","insertText":"_Construct_novalue","insertTextFormat":1,"kind":3,"label":"_Construct_novalue(_T1 *__p)","score":0.41770476102828979,"sortText":"412a229a_Construct_novalue","textEdit":{"newText":"_Construct_novalue","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <deque>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<deque>","documentation":"\n Destroy a range of objects.  If the value_type of the object has\n a trivial destructor, the compiler should optimize all of this\n away, otherwise the objects' destructors must be invoked.\n   ","filterText":"_Destroy","insertText":"_Destroy","insertTextFormat":1,"kind":3,"label":"_Destroy(\u2026)","score":0.41770476102828979,"sortText":"412a229a_Destroy","textEdit":{"newText":"_Destroy","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <deque>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<deque>","filterText":"_Destroy_aux","insertText":"_Destroy_aux","insertTextFormat":1,"kind":7,"label":"_Destroy_aux<bool>","score":0.41770476102828979,"sortText":"412a229a_Destroy_aux","textEdit":{"newText":"_Destroy_aux","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <deque>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<deque>","documentation":"\n Destroy a range of objects.  If the value_type of the object has\n a trivial destructor, the compiler should optimize all of this\n away, otherwise the objects' destructors must be invoked.\n   ","filterText":"_Destroy_n","insertText":"_Destroy_n","insertTextFormat":1,"kind":3,"label":"_Destroy_n(_ForwardIterator __first, _Size __count)","score":0.41770476102828979,"sortText":"412a229a_Destroy_n","textEdit":{"newText":"_Destroy_n","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <deque>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<deque>","filterText":"_Destroy_n_aux","insertText":"_Destroy_n_aux","insertTextFormat":1,"kind":7,"label":"_Destroy_n_aux<bool>","score":0.41770476102828979,"sortText":"412a229a_Destroy_n_aux","textEdit":{"newText":"_Destroy_n_aux","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"std::(anonymous)\n<vector>","filterText":"_S_word_bit","insertText":"_S_word_bit","insertTextFormat":1,"kind":12,"label":"_S_word_bit","score":0.41770476102828979,"sortText":"412a229a_S_word_bit","textEdit":{"newText":"_S_word_bit","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<algorithm>","documentation":"\n  @brief This does what you think it does.\n  @ingroup sorting_algorithms\n  @param  __a  A thing of arbitrary type.\n  @param  __b  Another thing of arbitrary type.\n  @param  __comp  A @link comparison_functors comparison functor@endlink.\n  @return   The lesser of the parameters.\n\n  This will work on temporary expressions, since they are only evaluated\n  once, unlike a preprocessor macro.\n  ","filterText":"_Tp","insertText":"_Tp","insertTextFormat":1,"kind":6,"label":"_Tp<typename _Tp, typename _Compare>","score":0.41770476102828979,"sortText":"412a229a_Tp","textEdit":{"newText":"_Tp","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"\n<vector>","documentation":"See bits/stl_deque.h's _Deque_base for an explanation.","filterText":"_Vector_base","insertText":"_Vector_base","insertTextFormat":1,"kind":7,"label":"_Vector_base<typename _Tp, typename _Alloc>","score":0.41770476102828979,"sortText":"412a229a_Vector_base","textEdit":{"newText":"_Vector_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <allocator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<allocator>","documentation":"Optimize for stateless allocators.","filterText":"__alloc_neq","insertText":"__alloc_neq","insertTextFormat":1,"kind":7,"label":"__alloc_neq<typename _Alloc, bool>","score":0.41770476102828979,"sortText":"412a229a__alloc_neq","textEdit":{"newText":"__alloc_neq","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <allocator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<allocator>","documentation":"To implement Option 3 of DR 431.","filterText":"__alloc_swap","insertText":"__alloc_swap","insertTextFormat":1,"kind":7,"label":"__alloc_swap<typename _Alloc, bool>","score":0.41770476102828979,"sortText":"412a229a__alloc_swap","textEdit":{"newText":"__alloc_swap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<algorithm>","documentation":"All of these auxiliary structs serve two purposes.  (1) Replace\ncalls to copy with memmove whenever possible.  (Memmove, not memcpy,\nbecause the input and output ranges are permitted to overlap.)\n(2) If we're using random access iterators, then write the loop as\na for loop with an explicit count.","filterText":"__copy_move","insertText":"__copy_move","insertTextFormat":1,"kind":7,"label":"__copy_move<bool, bool, typename>","score":0.41770476102828979,"sortText":"412a229a__copy_move","textEdit":{"newText":"__copy_move","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_OI\n<algorithm>","filterText":"__copy_move_a","insertText":"__copy_move_a","insertTextFormat":1,"kind":3,"label":"__copy_move_a<bool _IsMove>(_II __first, _II __last, _OI __result)","score":0.41770476102828979,"sortText":"412a229a__copy_move_a","textEdit":{"newText":"__copy_move_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[4 overloads]\n<algorithm>","filterText":"__copy_move_a2","insertText":"__copy_move_a2","insertTextFormat":1,"kind":3,"label":"__copy_move_a2(\u2026)","score":0.41770476102828979,"sortText":"412a229a__copy_move_a2","textEdit":{"newText":"__copy_move_a2","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<algorithm>","filterText":"__copy_move_backward","insertText":"__copy_move_backward","insertTextFormat":1,"kind":7,"label":"__copy_move_backward<bool, bool, typename>","score":0.41770476102828979,"sortText":"412a229a__copy_move_backward","textEdit":{"newText":"__copy_move_backward","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_BI2\n<algorithm>","filterText":"__copy_move_backward_a","insertText":"__copy_move_backward_a","insertTextFormat":1,"kind":3,"label":"__copy_move_backward_a<bool _IsMove>(_BI1 __first, _BI1 __last, _BI2 __result)","score":0.41770476102828979,"sortText":"412a229a__copy_move_backward_a","textEdit":{"newText":"__copy_move_backward_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_BI2\n<algorithm>","filterText":"__copy_move_backward_a2","insertText":"__copy_move_backward_a2","insertTextFormat":1,"kind":3,"label":"__copy_move_backward_a2<bool _IsMove>(_BI1 __first, _BI1 __last, _BI2 __result)","score":0.41770476102828979,"sortText":"412a229a__copy_move_backward_a2","textEdit":{"newText":"__copy_move_backward_a2","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<algorithm>","filterText":"__equal","insertText":"__equal","insertTextFormat":1,"kind":7,"label":"__equal<bool _BoolType>","score":0.41770476102828979,"sortText":"412a229a__equal","textEdit":{"newText":"__equal","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<algorithm>","filterText":"__equal_aux","insertText":"__equal_aux","insertTextFormat":1,"kind":3,"label":"__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)","score":0.41770476102828979,"sortText":"412a229a__equal_aux","textEdit":{"newText":"__equal_aux","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<algorithm>","documentation":"Specialization: for char types we can use memset.","filterText":"__fill_a","insertText":"__fill_a","insertTextFormat":1,"kind":3,"label":"__fill_a(\u2026)","score":0.41770476102828979,"sortText":"412a229a__fill_a","textEdit":{"newText":"__fill_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"detail":"void\n<vector>","filterText":"__fill_bvector","insertText":"__fill_bvector","insertTextFormat":1,"kind":3,"label":"__fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)","score":0.41770476102828979,"sortText":"412a229a__fill_bvector","textEdit":{"newText":"__fill_bvector","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<algorithm>","filterText":"__fill_n_a","insertText":"__fill_n_a","insertTextFormat":1,"kind":3,"label":"__fill_n_a(\u2026)","score":0.41770476102828979,"sortText":"412a229a__fill_n_a","textEdit":{"newText":"__fill_n_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<algorithm>","filterText":"__lc_rai","insertText":"__lc_rai","insertTextFormat":1,"kind":7,"label":"__lc_rai<typename, typename>","score":0.41770476102828979,"sortText":"412a229a__lc_rai","textEdit":{"newText":"__lc_rai","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<algorithm>","filterText":"__lexicographical_compare","insertText":"__lexicographical_compare","insertTextFormat":1,"kind":7,"label":"__lexicographical_compare<bool _BoolType>","score":0.41770476102828979,"sortText":"412a229a__lexicographical_compare","textEdit":{"newText":"__lexicographical_compare","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<algorithm>","filterText":"__lexicographical_compare_aux","insertText":"__lexicographical_compare_aux","insertTextFormat":1,"kind":3,"label":"__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)","score":0.41770476102828979,"sortText":"412a229a__lexicographical_compare_aux","textEdit":{"newText":"__lexicographical_compare_aux","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"bool\n<algorithm>","filterText":"__lexicographical_compare_impl","insertText":"__lexicographical_compare_impl","insertTextFormat":1,"kind":3,"label":"__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _Compare __comp)","score":0.41770476102828979,"sortText":"412a229a__lexicographical_compare_impl","textEdit":{"newText":"__lexicographical_compare_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[4 overloads]\n<algorithm>","documentation":"This is a helper function for the sort routines and for random.tcc.\nPrecondition: __n > 0.","filterText":"__lg","insertText":"__lg","insertTextFormat":1,"kind":3,"label":"__lg(\u2026)","score":0.41770476102828979,"sortText":"412a229a__lg","textEdit":{"newText":"__lg","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<algorithm>","filterText":"__lower_bound","insertText":"__lower_bound","insertTextFormat":1,"kind":3,"label":"__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__val, _Compare __comp)","score":0.41770476102828979,"sortText":"412a229a__lower_bound","textEdit":{"newText":"__lower_bound","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <algorithm>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<algorithm>","filterText":"__mismatch","insertText":"__mismatch","insertTextFormat":1,"kind":3,"label":"__mismatch(\u2026)","score":0.41770476102828979,"sortText":"412a229a__mismatch","textEdit":{"newText":"__mismatch","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__uninitialized_copy","insertText":"__uninitialized_copy","insertTextFormat":1,"kind":7,"label":"__uninitialized_copy<bool _TrivialValueTypes>","score":0.41770476102828979,"sortText":"412a229a__uninitialized_copy","textEdit":{"newText":"__uninitialized_copy","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<memory>","documentation":"Extensions: versions of uninitialized_copy, uninitialized_fill,\n and uninitialized_fill_n that take an allocator parameter.\n We dispatch back to the standard versions when we're given the\n default allocator.  For nondefault allocators we do not use \n any of the POD optimizations.","filterText":"__uninitialized_copy_a","insertText":"__uninitialized_copy_a","insertTextFormat":1,"kind":3,"label":"__uninitialized_copy_a(\u2026)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_copy_a","textEdit":{"newText":"__uninitialized_copy_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<memory>","filterText":"__uninitialized_copy_n","insertText":"__uninitialized_copy_n","insertTextFormat":1,"kind":3,"label":"__uninitialized_copy_n(\u2026)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_copy_n","textEdit":{"newText":"__uninitialized_copy_n","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<memory>","filterText":"__uninitialized_copy_n_pair","insertText":"__uninitialized_copy_n_pair","insertTextFormat":1,"kind":3,"label":"__uninitialized_copy_n_pair(\u2026)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_copy_n_pair","textEdit":{"newText":"__uninitialized_copy_n_pair","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","documentation":"__uninitialized_default\nFills [first, last) with std::distance(first, last) default\nconstructed value_types(s).","filterText":"__uninitialized_default","insertText":"__uninitialized_default","insertTextFormat":1,"kind":3,"label":"__uninitialized_default(_ForwardIterator __first, _ForwardIterator __last)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default","textEdit":{"newText":"__uninitialized_default","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"Extensions: __uninitialized_default, __uninitialized_default_n,\n__uninitialized_default_a, __uninitialized_default_n_a.","filterText":"__uninitialized_default_1","insertText":"__uninitialized_default_1","insertTextFormat":1,"kind":7,"label":"__uninitialized_default_1<bool _TrivialValueType>","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_1","textEdit":{"newText":"__uninitialized_default_1","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<memory>","documentation":"__uninitialized_default_a\nFills [first, last) with std::distance(first, last) default\nconstructed value_types(s), constructed with the allocator alloc.","filterText":"__uninitialized_default_a","insertText":"__uninitialized_default_a","insertTextFormat":1,"kind":3,"label":"__uninitialized_default_a(\u2026)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_a","textEdit":{"newText":"__uninitialized_default_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__uninitialized_default_n_1","insertText":"__uninitialized_default_n_1","insertTextFormat":1,"kind":7,"label":"__uninitialized_default_n_1<bool _TrivialValueType>","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_n_1","textEdit":{"newText":"__uninitialized_default_n_1","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<memory>","documentation":"__uninitialized_default_n_a\nFills [first, first + n) with n default constructed value_types(s),\nconstructed with the allocator alloc.","filterText":"__uninitialized_default_n_a","insertText":"__uninitialized_default_n_a","insertTextFormat":1,"kind":3,"label":"__uninitialized_default_n_a(\u2026)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_n_a","textEdit":{"newText":"__uninitialized_default_n_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","documentation":"__uninitialized_default_novalue\nFills [first, last) with std::distance(first, last) default-initialized\nvalue_types(s).","filterText":"__uninitialized_default_novalue","insertText":"__uninitialized_default_novalue","insertTextFormat":1,"kind":3,"label":"__uninitialized_default_novalue(_ForwardIterator __first, _ForwardIterator __last)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_novalue","textEdit":{"newText":"__uninitialized_default_novalue","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__uninitialized_default_novalue_1","insertText":"__uninitialized_default_novalue_1","insertTextFormat":1,"kind":7,"label":"__uninitialized_default_novalue_1<bool _TrivialValueType>","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_novalue_1","textEdit":{"newText":"__uninitialized_default_novalue_1","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<memory>","documentation":"__uninitialized_default_n\nFills [first, first + n) with n default-initialized value_type(s).","filterText":"__uninitialized_default_novalue_n","insertText":"__uninitialized_default_novalue_n","insertTextFormat":1,"kind":3,"label":"__uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_novalue_n","textEdit":{"newText":"__uninitialized_default_novalue_n","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__uninitialized_default_novalue_n_1","insertText":"__uninitialized_default_novalue_n_1","insertTextFormat":1,"kind":7,"label":"__uninitialized_default_novalue_n_1<bool _TrivialValueType>","score":0.41770476102828979,"sortText":"412a229a__uninitialized_default_novalue_n_1","textEdit":{"newText":"__uninitialized_default_novalue_n_1","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__uninitialized_fill","insertText":"__uninitialized_fill","insertTextFormat":1,"kind":7,"label":"__uninitialized_fill<bool _TrivialValueType>","score":0.41770476102828979,"sortText":"412a229a__uninitialized_fill","textEdit":{"newText":"__uninitialized_fill","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","filterText":"__uninitialized_fill_a","insertText":"__uninitialized_fill_a","insertTextFormat":1,"kind":3,"label":"__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__x, _Allocator &__alloc)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_fill_a","textEdit":{"newText":"__uninitialized_fill_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__uninitialized_fill_n","insertText":"__uninitialized_fill_n","insertTextFormat":1,"kind":7,"label":"__uninitialized_fill_n<bool _TrivialValueType>","score":0.41770476102828979,"sortText":"412a229a__uninitialized_fill_n","textEdit":{"newText":"__uninitialized_fill_n","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<memory>","filterText":"__uninitialized_fill_n_a","insertText":"__uninitialized_fill_n_a","insertTextFormat":1,"kind":3,"label":"__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &__x, _Allocator &__alloc)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_fill_n_a","textEdit":{"newText":"__uninitialized_fill_n_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<memory>","filterText":"__uninitialized_move_a","insertText":"__uninitialized_move_a","insertTextFormat":1,"kind":3,"label":"__uninitialized_move_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator &__alloc)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_move_a","textEdit":{"newText":"__uninitialized_move_a","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_ForwardIterator\n<memory>","documentation":"__uninitialized_move_copy\nMoves [first1, last1) into [result, result + (last1 - first1)), and\n copies [first2, last2) into\n [result, result + (last1 - first1) + (last2 - first2)).","filterText":"__uninitialized_move_copy","insertText":"__uninitialized_move_copy","insertTextFormat":1,"kind":3,"label":"__uninitialized_move_copy(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2, _ForwardIterator __result, _Allocator &__alloc)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_move_copy","textEdit":{"newText":"__uninitialized_move_copy","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","documentation":"__uninitialized_move_fill\nMoves [first1, last1) into [first2, first2 + (last1 - first1)), and\n fills [first2 + (last1 - first1), last2) with x.","filterText":"__uninitialized_move_fill","insertText":"__uninitialized_move_fill","insertTextFormat":1,"kind":3,"label":"__uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2, const _Tp &__x, _Allocator &__alloc)","score":0.41770476102828979,"sortText":"412a229a__uninitialized_move_fill","textEdit":{"newText":"__uninitialized_move_fill","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__add_lvalue_reference_helper","insertText":"__add_lvalue_reference_helper","insertTextFormat":1,"kind":7,"label":"__add_lvalue_reference_helper<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__add_lvalue_reference_helper","textEdit":{"newText":"__add_lvalue_reference_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"add_pointer","filterText":"__add_pointer_helper","insertText":"__add_pointer_helper","insertTextFormat":1,"kind":7,"label":"__add_pointer_helper<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__add_pointer_helper","textEdit":{"newText":"__add_pointer_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__add_rvalue_reference_helper","insertText":"__add_rvalue_reference_helper","insertTextFormat":1,"kind":7,"label":"__add_rvalue_reference_helper<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__add_rvalue_reference_helper","textEdit":{"newText":"__add_rvalue_reference_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__aligned_storage_msa","insertText":"__aligned_storage_msa","insertTextFormat":1,"kind":7,"label":"__aligned_storage_msa<std::size_t _Len>","score":0.38186699151992798,"sortText":"413c7bee__aligned_storage_msa","textEdit":{"newText":"__aligned_storage_msa","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__and_","insertText":"__and_","insertTextFormat":1,"kind":7,"label":"__and_<typename>","score":0.38186699151992798,"sortText":"413c7bee__and_","textEdit":{"newText":"__and_","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__call_is_nothrow","insertText":"__call_is_nothrow","insertTextFormat":1,"kind":7,"label":"__call_is_nothrow<typename _Result, typename _Fn, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__call_is_nothrow","textEdit":{"newText":"__call_is_nothrow","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__call_is_nothrow_","insertText":"__call_is_nothrow_","insertTextFormat":1,"kind":8,"label":"__call_is_nothrow_<typename _Fn, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__call_is_nothrow_","textEdit":{"newText":"__call_is_nothrow_","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[4 overloads]\n<type_traits>","filterText":"__call_is_nt","insertText":"__call_is_nt","insertTextFormat":1,"kind":3,"label":"__call_is_nt(\u2026)","score":0.38186699151992798,"sortText":"413c7bee__call_is_nt","textEdit":{"newText":"__call_is_nt","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__common_type_impl","insertText":"__common_type_impl","insertTextFormat":1,"kind":7,"label":"__common_type_impl<typename _Tp, typename _Up>","score":0.38186699151992798,"sortText":"413c7bee__common_type_impl","textEdit":{"newText":"__common_type_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__decay_and_strip","insertText":"__decay_and_strip","insertTextFormat":1,"kind":7,"label":"__decay_and_strip<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__decay_and_strip","textEdit":{"newText":"__decay_and_strip","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Decay trait for arrays and functions, used for perfect forwarding\nin make_pair, make_tuple, etc.","filterText":"__decay_selector","insertText":"__decay_selector","insertTextFormat":1,"kind":7,"label":"__decay_selector<typename _Up, bool _IsArray, bool _IsFunction>","score":0.38186699151992798,"sortText":"413c7bee__decay_selector","textEdit":{"newText":"__decay_selector","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__declval_protector","insertText":"__declval_protector","insertTextFormat":1,"kind":7,"label":"__declval_protector<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__declval_protector","textEdit":{"newText":"__declval_protector","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Implementation of the detection idiom (negative case).","filterText":"__detector","insertText":"__detector","insertTextFormat":1,"kind":7,"label":"__detector<typename _Default, typename _AlwaysVoid, template<...> class _Op, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__detector","textEdit":{"newText":"__detector","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Sfinae-friendly common_type implementation:","filterText":"__do_common_type_impl","insertText":"__do_common_type_impl","insertTextFormat":1,"kind":7,"label":"__do_common_type_impl","score":0.38186699151992798,"sortText":"413c7bee__do_common_type_impl","textEdit":{"newText":"__do_common_type_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Implementation for non-reference types. To meet the proper\nvariable definition semantics, we also need to test for\nis_destructible in this case.\nThis form should be simplified by a single expression:\n::delete ::new _Tp(declval<_Arg>()), see c++/51222.","filterText":"__do_is_direct_constructible_impl","insertText":"__do_is_direct_constructible_impl","insertTextFormat":1,"kind":7,"label":"__do_is_direct_constructible_impl","score":0.38186699151992798,"sortText":"413c7bee__do_is_direct_constructible_impl","textEdit":{"newText":"__do_is_direct_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__do_is_implicitly_default_constructible_impl","insertText":"__do_is_implicitly_default_constructible_impl","insertTextFormat":1,"kind":7,"label":"__do_is_implicitly_default_constructible_impl","score":0.38186699151992798,"sortText":"413c7bee__do_is_implicitly_default_constructible_impl","textEdit":{"newText":"__do_is_implicitly_default_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Since default-construction and binary direct-initialization have\nbeen handled separately, the implementation of the remaining\nn-ary construction cases is rather straightforward. We can use\nhere a functional cast, because array types are excluded anyway\nand this form is never interpreted as a C cast.","filterText":"__do_is_nary_constructible_impl","insertText":"__do_is_nary_constructible_impl","insertTextFormat":1,"kind":7,"label":"__do_is_nary_constructible_impl","score":0.38186699151992798,"sortText":"413c7bee__do_is_nary_constructible_impl","textEdit":{"newText":"__do_is_nary_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"is_nothrow_destructible requires that is_destructible is\nsatisfied as well.  We realize that by mimicing the\nimplementation of is_destructible but refer to noexcept(expr)\ninstead of decltype(expr).","filterText":"__do_is_nt_destructible_impl","insertText":"__do_is_nt_destructible_impl","insertTextFormat":1,"kind":7,"label":"__do_is_nt_destructible_impl","score":0.38186699151992798,"sortText":"413c7bee__do_is_nt_destructible_impl","textEdit":{"newText":"__do_is_nt_destructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"The hardest part of this trait is the binary direct-initialization\ncase, because we hit into a functional cast of the form T(arg).\nThis implementation uses different strategies depending on the\ntarget type to reduce the test overhead as much as possible:\n\na) For a reference target type, we use a static_cast expression\n   modulo its extra cases.\n\nb) For a non-reference target type we use a ::new expression.","filterText":"__do_is_static_castable_impl","insertText":"__do_is_static_castable_impl","insertTextFormat":1,"kind":7,"label":"__do_is_static_castable_impl","score":0.38186699151992798,"sortText":"413c7bee__do_is_static_castable_impl","textEdit":{"newText":"__do_is_static_castable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__do_member_type_wrapper","insertText":"__do_member_type_wrapper","insertTextFormat":1,"kind":7,"label":"__do_member_type_wrapper","score":0.38186699151992798,"sortText":"413c7bee__do_member_type_wrapper","textEdit":{"newText":"__do_member_type_wrapper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__failure_type","insertText":"__failure_type","insertTextFormat":1,"kind":7,"label":"__failure_type","score":0.38186699151992798,"sortText":"413c7bee__failure_type","textEdit":{"newText":"__failure_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Used by result_of, invoke etc. to unwrap a reference_wrapper.","filterText":"__inv_unwrap","insertText":"__inv_unwrap","insertTextFormat":1,"kind":7,"label":"__inv_unwrap<typename _Tp, typename _Up>","score":0.38186699151992798,"sortText":"413c7bee__inv_unwrap","textEdit":{"newText":"__inv_unwrap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__invoke_memfun_deref","insertText":"__invoke_memfun_deref","insertTextFormat":1,"kind":7,"label":"__invoke_memfun_deref","score":0.38186699151992798,"sortText":"413c7bee__invoke_memfun_deref","textEdit":{"newText":"__invoke_memfun_deref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__invoke_memfun_ref","insertText":"__invoke_memfun_ref","insertTextFormat":1,"kind":7,"label":"__invoke_memfun_ref","score":0.38186699151992798,"sortText":"413c7bee__invoke_memfun_ref","textEdit":{"newText":"__invoke_memfun_ref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__invoke_memobj_deref","insertText":"__invoke_memobj_deref","insertTextFormat":1,"kind":7,"label":"__invoke_memobj_deref","score":0.38186699151992798,"sortText":"413c7bee__invoke_memobj_deref","textEdit":{"newText":"__invoke_memobj_deref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__invoke_memobj_ref","insertText":"__invoke_memobj_ref","insertTextFormat":1,"kind":7,"label":"__invoke_memobj_ref","score":0.38186699151992798,"sortText":"413c7bee__invoke_memobj_ref","textEdit":{"newText":"__invoke_memobj_ref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__invoke_other","insertText":"__invoke_other","insertTextFormat":1,"kind":7,"label":"__invoke_other","score":0.38186699151992798,"sortText":"413c7bee__invoke_other","textEdit":{"newText":"__invoke_other","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"__invoke_result (std::invoke_result for C++11)","filterText":"__invoke_result","insertText":"__invoke_result","insertTextFormat":1,"kind":7,"label":"__invoke_result<typename _Functor, typename _ArgTypes>","score":0.38186699151992798,"sortText":"413c7bee__invoke_result","textEdit":{"newText":"__invoke_result","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_array_known_bounds","insertText":"__is_array_known_bounds","insertTextFormat":1,"kind":7,"label":"__is_array_known_bounds<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_array_known_bounds","textEdit":{"newText":"__is_array_known_bounds","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_array_unknown_bounds","insertText":"__is_array_unknown_bounds","insertTextFormat":1,"kind":7,"label":"__is_array_unknown_bounds<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_array_unknown_bounds","textEdit":{"newText":"__is_array_unknown_bounds","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_assignable_helper","insertText":"__is_assignable_helper","insertTextFormat":1,"kind":7,"label":"__is_assignable_helper<typename _Tp, typename _Up>","score":0.38186699151992798,"sortText":"413c7bee__is_assignable_helper","textEdit":{"newText":"__is_assignable_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_constructible_impl","insertText":"__is_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_constructible_impl<typename _Tp, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__is_constructible_impl","textEdit":{"newText":"__is_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_convertible_helper","insertText":"__is_convertible_helper","insertTextFormat":1,"kind":7,"label":"__is_convertible_helper<typename _From, typename _To, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_convertible_helper","textEdit":{"newText":"__is_convertible_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_copy_constructible_impl","insertText":"__is_copy_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_copy_constructible_impl<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_copy_constructible_impl","textEdit":{"newText":"__is_copy_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_default_constructible_atom","insertText":"__is_default_constructible_atom","insertTextFormat":1,"kind":7,"label":"__is_default_constructible_atom<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_default_constructible_atom","textEdit":{"newText":"__is_default_constructible_atom","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_default_constructible_impl","insertText":"__is_default_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_default_constructible_impl<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_default_constructible_impl","textEdit":{"newText":"__is_default_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_default_constructible_safe","insertText":"__is_default_constructible_safe","insertTextFormat":1,"kind":7,"label":"__is_default_constructible_safe<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_default_constructible_safe","textEdit":{"newText":"__is_default_constructible_safe","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_destructible_impl","insertText":"__is_destructible_impl","insertTextFormat":1,"kind":7,"label":"__is_destructible_impl<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_destructible_impl","textEdit":{"newText":"__is_destructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_direct_constructible","insertText":"__is_direct_constructible","insertTextFormat":1,"kind":7,"label":"__is_direct_constructible<typename _Tp, typename _Arg>","score":0.38186699151992798,"sortText":"413c7bee__is_direct_constructible","textEdit":{"newText":"__is_direct_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_direct_constructible_impl","insertText":"__is_direct_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_direct_constructible_impl<typename _Tp, typename _Arg>","score":0.38186699151992798,"sortText":"413c7bee__is_direct_constructible_impl","textEdit":{"newText":"__is_direct_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_direct_constructible_new","insertText":"__is_direct_constructible_new","insertTextFormat":1,"kind":7,"label":"__is_direct_constructible_new<typename _Tp, typename _Arg>","score":0.38186699151992798,"sortText":"413c7bee__is_direct_constructible_new","textEdit":{"newText":"__is_direct_constructible_new","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_direct_constructible_new_safe","insertText":"__is_direct_constructible_new_safe","insertTextFormat":1,"kind":7,"label":"__is_direct_constructible_new_safe<typename _Tp, typename _Arg>","score":0.38186699151992798,"sortText":"413c7bee__is_direct_constructible_new_safe","textEdit":{"newText":"__is_direct_constructible_new_safe","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_floating_point_helper","insertText":"__is_floating_point_helper","insertTextFormat":1,"kind":7,"label":"__is_floating_point_helper<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_floating_point_helper","textEdit":{"newText":"__is_floating_point_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_implicitly_default_constructible","insertText":"__is_implicitly_default_constructible","insertTextFormat":1,"kind":7,"label":"__is_implicitly_default_constructible<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_implicitly_default_constructible","textEdit":{"newText":"__is_implicitly_default_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_implicitly_default_constructible_impl","insertText":"__is_implicitly_default_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_implicitly_default_constructible_impl<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_implicitly_default_constructible_impl","textEdit":{"newText":"__is_implicitly_default_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_integral_helper","insertText":"__is_integral_helper","insertTextFormat":1,"kind":7,"label":"__is_integral_helper<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_integral_helper","textEdit":{"newText":"__is_integral_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_lvalue_to_rvalue_ref","insertText":"__is_lvalue_to_rvalue_ref","insertTextFormat":1,"kind":7,"label":"__is_lvalue_to_rvalue_ref<typename _From, typename _To, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_lvalue_to_rvalue_ref","textEdit":{"newText":"__is_lvalue_to_rvalue_ref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_member_function_pointer_helper","insertText":"__is_member_function_pointer_helper","insertTextFormat":1,"kind":7,"label":"__is_member_function_pointer_helper<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_member_function_pointer_helper","textEdit":{"newText":"__is_member_function_pointer_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_member_object_pointer_helper","insertText":"__is_member_object_pointer_helper","insertTextFormat":1,"kind":7,"label":"__is_member_object_pointer_helper<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_member_object_pointer_helper","textEdit":{"newText":"__is_member_object_pointer_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_member_pointer_helper","insertText":"__is_member_pointer_helper","insertTextFormat":1,"kind":7,"label":"__is_member_pointer_helper<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_member_pointer_helper","textEdit":{"newText":"__is_member_pointer_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_move_assignable_impl","insertText":"__is_move_assignable_impl","insertTextFormat":1,"kind":7,"label":"__is_move_assignable_impl<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_move_assignable_impl","textEdit":{"newText":"__is_move_assignable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_move_constructible_impl","insertText":"__is_move_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_move_constructible_impl<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_move_constructible_impl","textEdit":{"newText":"__is_move_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nary_constructible","insertText":"__is_nary_constructible","insertTextFormat":1,"kind":7,"label":"__is_nary_constructible<typename _Tp, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__is_nary_constructible","textEdit":{"newText":"__is_nary_constructible","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nothrow_copy_constructible_impl","insertText":"__is_nothrow_copy_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_nothrow_copy_constructible_impl<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_nothrow_copy_constructible_impl","textEdit":{"newText":"__is_nothrow_copy_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"__is_nothrow_invocable (std::is_nothrow_invocable for C++11)","filterText":"__is_nothrow_invocable","insertText":"__is_nothrow_invocable","insertTextFormat":1,"kind":7,"label":"__is_nothrow_invocable<typename _Fn, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__is_nothrow_invocable","textEdit":{"newText":"__is_nothrow_invocable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nothrow_swappable","insertText":"__is_nothrow_swappable","insertTextFormat":1,"kind":7,"label":"__is_nothrow_swappable<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_nothrow_swappable","textEdit":{"newText":"__is_nothrow_swappable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nothrow_swappable_impl","insertText":"__is_nothrow_swappable_impl","insertTextFormat":1,"kind":7,"label":"__is_nothrow_swappable_impl<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_nothrow_swappable_impl","textEdit":{"newText":"__is_nothrow_swappable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_assignable_impl","insertText":"__is_nt_assignable_impl","insertTextFormat":1,"kind":7,"label":"__is_nt_assignable_impl<typename _Tp, typename _Up>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_assignable_impl","textEdit":{"newText":"__is_nt_assignable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_constructible_impl","insertText":"__is_nt_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_nt_constructible_impl<typename _Tp, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_constructible_impl","textEdit":{"newText":"__is_nt_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_copy_assignable_impl","insertText":"__is_nt_copy_assignable_impl","insertTextFormat":1,"kind":7,"label":"__is_nt_copy_assignable_impl<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_copy_assignable_impl","textEdit":{"newText":"__is_nt_copy_assignable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_default_constructible_atom","insertText":"__is_nt_default_constructible_atom","insertTextFormat":1,"kind":7,"label":"__is_nt_default_constructible_atom<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_default_constructible_atom","textEdit":{"newText":"__is_nt_default_constructible_atom","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_default_constructible_impl","insertText":"__is_nt_default_constructible_impl","insertTextFormat":1,"kind":7,"label":"__is_nt_default_constructible_impl<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_default_constructible_impl","textEdit":{"newText":"__is_nt_default_constructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_destructible_impl","insertText":"__is_nt_destructible_impl","insertTextFormat":1,"kind":7,"label":"__is_nt_destructible_impl<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_destructible_impl","textEdit":{"newText":"__is_nt_destructible_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_destructible_safe","insertText":"__is_nt_destructible_safe","insertTextFormat":1,"kind":7,"label":"__is_nt_destructible_safe<typename _Tp, bool, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_destructible_safe","textEdit":{"newText":"__is_nt_destructible_safe","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_nt_move_assignable_impl","insertText":"__is_nt_move_assignable_impl","insertTextFormat":1,"kind":7,"label":"__is_nt_move_assignable_impl<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_nt_move_assignable_impl","textEdit":{"newText":"__is_nt_move_assignable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_null_pointer_helper","insertText":"__is_null_pointer_helper","insertTextFormat":1,"kind":7,"label":"__is_null_pointer_helper<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_null_pointer_helper","textEdit":{"newText":"__is_null_pointer_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"__is_nullptr_t (extension).","filterText":"__is_nullptr_t","insertText":"__is_nullptr_t","insertTextFormat":1,"kind":7,"label":"__is_nullptr_t<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_nullptr_t","textEdit":{"newText":"__is_nullptr_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_pointer_helper","insertText":"__is_pointer_helper","insertTextFormat":1,"kind":7,"label":"__is_pointer_helper<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_pointer_helper","textEdit":{"newText":"__is_pointer_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Utility to detect referenceable types ([defns.referenceable]).","filterText":"__is_referenceable","insertText":"__is_referenceable","insertTextFormat":1,"kind":7,"label":"__is_referenceable<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_referenceable","textEdit":{"newText":"__is_referenceable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_signed_helper","insertText":"__is_signed_helper","insertTextFormat":1,"kind":7,"label":"__is_signed_helper<typename _Tp, bool>","score":0.38186699151992798,"sortText":"413c7bee__is_signed_helper","textEdit":{"newText":"__is_signed_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"__is_static_castable","filterText":"__is_static_castable","insertText":"__is_static_castable","insertTextFormat":1,"kind":7,"label":"__is_static_castable<typename _From, typename _To>","score":0.38186699151992798,"sortText":"413c7bee__is_static_castable","textEdit":{"newText":"__is_static_castable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_static_castable_safe","insertText":"__is_static_castable_safe","insertTextFormat":1,"kind":7,"label":"__is_static_castable_safe<typename _From, typename _To>","score":0.38186699151992798,"sortText":"413c7bee__is_static_castable_safe","textEdit":{"newText":"__is_static_castable_safe","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_swappable_impl","insertText":"__is_swappable_impl","insertTextFormat":1,"kind":7,"label":"__is_swappable_impl<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__is_swappable_impl","textEdit":{"newText":"__is_swappable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_swappable_with_impl","insertText":"__is_swappable_with_impl","insertTextFormat":1,"kind":7,"label":"__is_swappable_with_impl<typename _Tp, typename _Up>","score":0.38186699151992798,"sortText":"413c7bee__is_swappable_with_impl","textEdit":{"newText":"__is_swappable_with_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_tuple_like_impl","insertText":"__is_tuple_like_impl","insertTextFormat":1,"kind":7,"label":"__is_tuple_like_impl<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_tuple_like_impl","textEdit":{"newText":"__is_tuple_like_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__is_void_helper","insertText":"__is_void_helper","insertTextFormat":1,"kind":7,"label":"__is_void_helper<typename>","score":0.38186699151992798,"sortText":"413c7bee__is_void_helper","textEdit":{"newText":"__is_void_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Utility for finding the signed versions of unsigned integral types.","filterText":"__make_signed","insertText":"__make_signed","insertTextFormat":1,"kind":7,"label":"__make_signed<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__make_signed","textEdit":{"newText":"__make_signed","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Select between integral and enum: not possible to be both.","filterText":"__make_signed_selector","insertText":"__make_signed_selector","insertTextFormat":1,"kind":7,"label":"__make_signed_selector<typename _Tp, bool _IsInt, bool _IsEnum>","score":0.38186699151992798,"sortText":"413c7bee__make_signed_selector","textEdit":{"newText":"__make_signed_selector","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Select between integral and enum: not possible to be both.","filterText":"__make_unsigned_selector","insertText":"__make_unsigned_selector","insertTextFormat":1,"kind":7,"label":"__make_unsigned_selector<typename _Tp, bool _IsInt, bool _IsEnum>","score":0.38186699151992798,"sortText":"413c7bee__make_unsigned_selector","textEdit":{"newText":"__make_unsigned_selector","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__match_cv_qualifiers","insertText":"__match_cv_qualifiers","insertTextFormat":1,"kind":7,"label":"__match_cv_qualifiers<typename _Qualified, typename _Unqualified, bool _IsConst, bool _IsVol>","score":0.38186699151992798,"sortText":"413c7bee__match_cv_qualifiers","textEdit":{"newText":"__match_cv_qualifiers","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__member_type_wrapper","insertText":"__member_type_wrapper","insertTextFormat":1,"kind":7,"label":"__member_type_wrapper<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__member_type_wrapper","textEdit":{"newText":"__member_type_wrapper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__nonesuch","insertText":"__nonesuch","insertTextFormat":1,"kind":7,"label":"__nonesuch","score":0.38186699151992798,"sortText":"413c7bee__nonesuch","textEdit":{"newText":"__nonesuch","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__not_","insertText":"__not_","insertTextFormat":1,"kind":7,"label":"__not_<typename _Pp>","score":0.38186699151992798,"sortText":"413c7bee__not_","textEdit":{"newText":"__not_","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__or_","insertText":"__or_","insertTextFormat":1,"kind":7,"label":"__or_<typename>","score":0.38186699151992798,"sortText":"413c7bee__or_","textEdit":{"newText":"__or_","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Pointer modifications.","filterText":"__remove_pointer_helper","insertText":"__remove_pointer_helper","insertTextFormat":1,"kind":7,"label":"__remove_pointer_helper<typename _Tp, typename>","score":0.38186699151992798,"sortText":"413c7bee__remove_pointer_helper","textEdit":{"newText":"__remove_pointer_helper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__result_of_impl","insertText":"__result_of_impl","insertTextFormat":1,"kind":7,"label":"__result_of_impl<bool, bool, typename _Functor, typename _ArgTypes>","score":0.38186699151992798,"sortText":"413c7bee__result_of_impl","textEdit":{"newText":"__result_of_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__result_of_memfun","insertText":"__result_of_memfun","insertTextFormat":1,"kind":7,"label":"__result_of_memfun<typename _MemPtr, typename _Arg, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__result_of_memfun","textEdit":{"newText":"__result_of_memfun","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__result_of_memfun_deref","insertText":"__result_of_memfun_deref","insertTextFormat":1,"kind":7,"label":"__result_of_memfun_deref<typename _MemPtr, typename _Arg, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__result_of_memfun_deref","textEdit":{"newText":"__result_of_memfun_deref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"[func.require] paragraph 1 bullet 2:","filterText":"__result_of_memfun_deref_impl","insertText":"__result_of_memfun_deref_impl","insertTextFormat":1,"kind":7,"label":"__result_of_memfun_deref_impl","score":0.38186699151992798,"sortText":"413c7bee__result_of_memfun_deref_impl","textEdit":{"newText":"__result_of_memfun_deref_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__result_of_memfun_ref","insertText":"__result_of_memfun_ref","insertTextFormat":1,"kind":7,"label":"__result_of_memfun_ref<typename _MemPtr, typename _Arg, typename _Args>","score":0.38186699151992798,"sortText":"413c7bee__result_of_memfun_ref","textEdit":{"newText":"__result_of_memfun_ref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"[func.require] paragraph 1 bullet 1:","filterText":"__result_of_memfun_ref_impl","insertText":"__result_of_memfun_ref_impl","insertTextFormat":1,"kind":7,"label":"__result_of_memfun_ref_impl","score":0.38186699151992798,"sortText":"413c7bee__result_of_memfun_ref_impl","textEdit":{"newText":"__result_of_memfun_ref_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__result_of_memobj","insertText":"__result_of_memobj","insertTextFormat":1,"kind":7,"label":"__result_of_memobj<typename _MemPtr, typename _Arg>","score":0.38186699151992798,"sortText":"413c7bee__result_of_memobj","textEdit":{"newText":"__result_of_memobj","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__result_of_memobj_deref","insertText":"__result_of_memobj_deref","insertTextFormat":1,"kind":7,"label":"__result_of_memobj_deref<typename _MemPtr, typename _Arg>","score":0.38186699151992798,"sortText":"413c7bee__result_of_memobj_deref","textEdit":{"newText":"__result_of_memobj_deref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__result_of_memobj_ref","insertText":"__result_of_memobj_ref","insertTextFormat":1,"kind":7,"label":"__result_of_memobj_ref<typename _MemPtr, typename _Arg>","score":0.38186699151992798,"sortText":"413c7bee__result_of_memobj_ref","textEdit":{"newText":"__result_of_memobj_ref","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"[func.require] paragraph 1 bullet 5:","filterText":"__result_of_other_impl","insertText":"__result_of_other_impl","insertTextFormat":1,"kind":7,"label":"__result_of_other_impl","score":0.38186699151992798,"sortText":"413c7bee__result_of_other_impl","textEdit":{"newText":"__result_of_other_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Associate a tag type with a specialization of __success_type.","filterText":"__result_of_success","insertText":"__result_of_success","insertTextFormat":1,"kind":7,"label":"__result_of_success<typename _Tp, typename _Tag>","score":0.38186699151992798,"sortText":"413c7bee__result_of_success","textEdit":{"newText":"__result_of_success","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__strictest_alignment","insertText":"__strictest_alignment","insertTextFormat":1,"kind":7,"label":"__strictest_alignment<typename _Types>","score":0.38186699151992798,"sortText":"413c7bee__strictest_alignment","textEdit":{"newText":"__strictest_alignment","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"Helper which adds a reference to a type when given a reference_wrapper","filterText":"__strip_reference_wrapper","insertText":"__strip_reference_wrapper","insertTextFormat":1,"kind":7,"label":"__strip_reference_wrapper<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__strip_reference_wrapper","textEdit":{"newText":"__strip_reference_wrapper","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"For several sfinae-friendly trait implementations we transport both the\nresult information (as the member type) and the failure information (no\nmember type). This is very similar to std::enable_if, but we cannot use\nthem, because we need to derive from them as an implementation detail.","filterText":"__success_type","insertText":"__success_type","insertTextFormat":1,"kind":7,"label":"__success_type<typename _Tp>","score":0.38186699151992798,"sortText":"413c7bee__success_type","textEdit":{"newText":"__success_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","filterText":"__void_t","insertText":"__void_t","insertTextFormat":1,"kind":8,"label":"__void_t<typename>","score":0.38186699151992798,"sortText":"413c7bee__void_t","textEdit":{"newText":"__void_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","filterText":"_BidirectionalIterator","insertText":"_BidirectionalIterator","insertTextFormat":1,"kind":6,"label":"_BidirectionalIterator<typename _BidirectionalIterator>","score":0.35252547264099121,"sortText":"414b81c8_BidirectionalIterator","textEdit":{"newText":"_BidirectionalIterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <typeinfo>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t\n<typeinfo>","documentation":"A similar hash primitive, using the FNV hash algorithm. This\nalgorithm is guaranteed to stay the same from release to release.\n(although it might not produce the same values on different\nmachines.)","filterText":"_Fnv_hash_bytes","insertText":"_Fnv_hash_bytes","insertTextFormat":1,"kind":3,"label":"_Fnv_hash_bytes(const void *__ptr, size_t __len, size_t __seed)","score":0.35252547264099121,"sortText":"414b81c8_Fnv_hash_bytes","textEdit":{"newText":"_Fnv_hash_bytes","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<functional>","documentation":"A hash function similar to FNV-1a (see PR59406 for how it differs).","filterText":"_Fnv_hash_impl","insertText":"_Fnv_hash_impl","insertTextFormat":1,"kind":7,"label":"_Fnv_hash_impl","score":0.35252547264099121,"sortText":"414b81c8_Fnv_hash_impl","textEdit":{"newText":"_Fnv_hash_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","filterText":"_ForwardIterator","insertText":"_ForwardIterator","insertTextFormat":1,"kind":6,"label":"_ForwardIterator<typename _ForwardIterator>","score":0.35252547264099121,"sortText":"414b81c8_ForwardIterator","textEdit":{"newText":"_ForwardIterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <typeinfo>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"size_t\n<typeinfo>","documentation":"Hash function implementation for the nontrivial specialization.\nAll of them are based on a primitive that hashes a pointer to a\nbyte array. The actual hash algorithm is not guaranteed to stay\nthe same from release to release -- it may be updated or tuned to\nimprove hash quality or speed.","filterText":"_Hash_bytes","insertText":"_Hash_bytes","insertTextFormat":1,"kind":3,"label":"_Hash_bytes(const void *__ptr, size_t __len, size_t __seed)","score":0.35252547264099121,"sortText":"414b81c8_Hash_bytes","textEdit":{"newText":"_Hash_bytes","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<functional>","filterText":"_Hash_impl","insertText":"_Hash_impl","insertTextFormat":1,"kind":7,"label":"_Hash_impl","score":0.35252547264099121,"sortText":"414b81c8_Hash_impl","textEdit":{"newText":"_Hash_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<utility>","filterText":"_Index_tuple","insertText":"_Index_tuple","insertTextFormat":1,"kind":7,"label":"_Index_tuple<std::size_t>","score":0.35252547264099121,"sortText":"414b81c8_Index_tuple","textEdit":{"newText":"_Index_tuple","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","filterText":"_List_const_iterator","insertText":"_List_const_iterator","insertTextFormat":1,"kind":7,"label":"_List_const_iterator<typename>","score":0.35252547264099121,"sortText":"414b81c8_List_const_iterator","textEdit":{"newText":"_List_const_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","documentation":"Forward declaration for the overloads of __distance.","filterText":"_List_iterator","insertText":"_List_iterator","insertTextFormat":1,"kind":7,"label":"_List_iterator<typename>","score":0.35252547264099121,"sortText":"414b81c8_List_iterator","textEdit":{"newText":"_List_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<utility>","documentation":"Concept utility functions, reused in conditionally-explicit\nconstructors.\nSee PR 70437, don't look at is_constructible or\nis_convertible if the types are the same to\navoid querying those properties for incomplete types.","filterText":"_PCC","insertText":"_PCC","insertTextFormat":1,"kind":7,"label":"_PCC<bool, typename _T1, typename _T2>","score":0.35252547264099121,"sortText":"414b81c8_PCC","textEdit":{"newText":"_PCC","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<iterator>","filterText":"_ReturnType","insertText":"_ReturnType","insertTextFormat":1,"kind":6,"label":"_ReturnType<typename _Iterator, typename _ReturnType>","score":0.35252547264099121,"sortText":"414b81c8_ReturnType","textEdit":{"newText":"_ReturnType","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<utility>","documentation":"\n  @brief Returns the actual address of the object or function\n         referenced by r, even in the presence of an overloaded\n         operator&.\n  @param  __r  Reference to an object or function.\n  @return   The actual address.\n  ","filterText":"_Tp","insertText":"_Tp","insertTextFormat":1,"kind":6,"label":"_Tp<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8_Tp","textEdit":{"newText":"_Tp","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_Tp *\n<utility>","documentation":"Used, in C++03 mode too, by allocators, etc.\n\n @brief Same as C++11 std::addressof\n @ingroup utilities","filterText":"__addressof","insertText":"__addressof","insertTextFormat":1,"kind":3,"label":"__addressof(_Tp &__r)","score":0.35252547264099121,"sortText":"414b81c8__addressof","textEdit":{"newText":"__addressof","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[3 overloads]\n<iterator>","filterText":"__advance","insertText":"__advance","insertTextFormat":1,"kind":3,"label":"__advance(\u2026)","score":0.35252547264099121,"sortText":"414b81c8__advance","textEdit":{"newText":"__advance","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","filterText":"__alloc_on_copy","insertText":"__alloc_on_copy","insertTextFormat":1,"kind":3,"label":"__alloc_on_copy(_Alloc &__one, const _Alloc &__two)","score":0.35252547264099121,"sortText":"414b81c8__alloc_on_copy","textEdit":{"newText":"__alloc_on_copy","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","filterText":"__alloc_on_swap","insertText":"__alloc_on_swap","insertTextFormat":1,"kind":3,"label":"__alloc_on_swap(_Alloc &__one, _Alloc &__two)","score":0.35252547264099121,"sortText":"414b81c8__alloc_on_swap","textEdit":{"newText":"__alloc_on_swap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <c++/4.8.2/x86_64-redhat-linux/bits/c++allocator.h>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<c++/4.8.2/x86_64-redhat-linux/bits/c++allocator.h>","documentation":"\n  @brief  An alias to the base class for std::allocator.\n  @ingroup allocators\n\n  Used to set the std::allocator base class to\n  __gnu_cxx::new_allocator.\n\n  @tparam  _Tp  Type of allocated object.\n    ","filterText":"__allocator_base","insertText":"__allocator_base","insertTextFormat":1,"kind":8,"label":"__allocator_base<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__allocator_base","textEdit":{"newText":"__allocator_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__allocator_traits_base","insertText":"__allocator_traits_base","insertTextFormat":1,"kind":7,"label":"__allocator_traits_base","score":0.35252547264099121,"sortText":"414b81c8__allocator_traits_base","textEdit":{"newText":"__allocator_traits_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"Compare for equality of types.","filterText":"__are_same","insertText":"__are_same","insertTextFormat":1,"kind":7,"label":"__are_same<typename, typename>","score":0.35252547264099121,"sortText":"414b81c8__are_same","textEdit":{"newText":"__are_same","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","filterText":"__distance","insertText":"__distance","insertTextFormat":1,"kind":3,"label":"__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)","score":0.35252547264099121,"sortText":"414b81c8__distance","textEdit":{"newText":"__distance","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","filterText":"__do_alloc_on_copy","insertText":"__do_alloc_on_copy","insertTextFormat":1,"kind":3,"label":"__do_alloc_on_copy(_Alloc &__one, const _Alloc &__two, true_type)","score":0.35252547264099121,"sortText":"414b81c8__do_alloc_on_copy","textEdit":{"newText":"__do_alloc_on_copy","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<memory>","filterText":"__do_alloc_on_move","insertText":"__do_alloc_on_move","insertTextFormat":1,"kind":3,"label":"__do_alloc_on_move(\u2026)","score":0.35252547264099121,"sortText":"414b81c8__do_alloc_on_move","textEdit":{"newText":"__do_alloc_on_move","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<memory>","filterText":"__do_alloc_on_swap","insertText":"__do_alloc_on_swap","insertTextFormat":1,"kind":3,"label":"__do_alloc_on_swap(_Alloc &, _Alloc &, false_type)","score":0.35252547264099121,"sortText":"414b81c8__do_alloc_on_swap","textEdit":{"newText":"__do_alloc_on_swap","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_Tp\n<utility>","documentation":"C++11 version of std::exchange for internal use.","filterText":"__exchange","insertText":"__exchange","insertTextFormat":1,"kind":3,"label":"__exchange(_Tp &__obj, _Up &&__new_val)","score":0.35252547264099121,"sortText":"414b81c8__exchange","textEdit":{"newText":"__exchange","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","filterText":"__false_type","insertText":"__false_type","insertTextFormat":1,"kind":7,"label":"__false_type","score":0.35252547264099121,"sortText":"414b81c8__false_type","textEdit":{"newText":"__false_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__get_first_arg_t","insertText":"__get_first_arg_t","insertTextFormat":1,"kind":8,"label":"__get_first_arg_t<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__get_first_arg_t","textEdit":{"newText":"__get_first_arg_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<functional>","documentation":"@defgroup hashes Hashes\n@ingroup functors\n\n Hashing functors taking a variable type and returning a @c std::size_t.\n\n@{","filterText":"__hash_base","insertText":"__hash_base","insertTextFormat":1,"kind":7,"label":"__hash_base<typename _Result, typename _Arg>","score":0.35252547264099121,"sortText":"414b81c8__hash_base","textEdit":{"newText":"__hash_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"\n An arithmetic type is an integer type or a floating point type","filterText":"__is_arithmetic","insertText":"__is_arithmetic","insertTextFormat":1,"kind":7,"label":"__is_arithmetic<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_arithmetic","textEdit":{"newText":"__is_arithmetic","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","filterText":"__is_byte","insertText":"__is_byte","insertTextFormat":1,"kind":7,"label":"__is_byte<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_byte","textEdit":{"newText":"__is_byte","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"\n For use in std::copy and std::find overloads for streambuf iterators.","filterText":"__is_char","insertText":"__is_char","insertTextFormat":1,"kind":7,"label":"__is_char<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_char","textEdit":{"newText":"__is_char","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"true if _Alloc::value_type is CopyInsertable into containers using _Alloc","filterText":"__is_copy_insertable","insertText":"__is_copy_insertable","insertTextFormat":1,"kind":7,"label":"__is_copy_insertable<typename _Alloc>","score":0.35252547264099121,"sortText":"414b81c8__is_copy_insertable","textEdit":{"newText":"__is_copy_insertable","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__is_copy_insertable_impl","insertText":"__is_copy_insertable_impl","insertTextFormat":1,"kind":7,"label":"__is_copy_insertable_impl<typename _Alloc>","score":0.35252547264099121,"sortText":"414b81c8__is_copy_insertable_impl","textEdit":{"newText":"__is_copy_insertable_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <functional>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<functional>","documentation":"Hint about performance of hash functor. If not fast the hash-based\ncontainers will cache the hash code.\nDefault behavior is to consider that hashers are fast unless specified\notherwise.","filterText":"__is_fast_hash","insertText":"__is_fast_hash","insertTextFormat":1,"kind":7,"label":"__is_fast_hash<typename _Hash>","score":0.35252547264099121,"sortText":"414b81c8__is_fast_hash","textEdit":{"newText":"__is_fast_hash","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"\n Floating point types","filterText":"__is_floating","insertText":"__is_floating","insertTextFormat":1,"kind":7,"label":"__is_floating<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_floating","textEdit":{"newText":"__is_floating","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"\n Integer types","filterText":"__is_integer","insertText":"__is_integer","insertTextFormat":1,"kind":7,"label":"__is_integer<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_integer","textEdit":{"newText":"__is_integer","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"\n Move iterator type","filterText":"__is_move_iterator","insertText":"__is_move_iterator","insertTextFormat":1,"kind":7,"label":"__is_move_iterator<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_move_iterator","textEdit":{"newText":"__is_move_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"\n A scalar type is an arithmetic type or a pointer type\n ","filterText":"__is_scalar","insertText":"__is_scalar","insertTextFormat":1,"kind":7,"label":"__is_scalar<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_scalar","textEdit":{"newText":"__is_scalar","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","documentation":"Holds if the template-argument is a void type.","filterText":"__is_void","insertText":"__is_void","insertTextFormat":1,"kind":7,"label":"__is_void<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__is_void","textEdit":{"newText":"__is_void","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","filterText":"__make_move_if_noexcept_iterator","insertText":"__make_move_if_noexcept_iterator","insertTextFormat":1,"kind":3,"label":"__make_move_if_noexcept_iterator(int __i)","score":0.35252547264099121,"sortText":"414b81c8__make_move_if_noexcept_iterator","textEdit":{"newText":"__make_move_if_noexcept_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__make_not_void","insertText":"__make_not_void","insertTextFormat":1,"kind":8,"label":"__make_not_void<typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__make_not_void","textEdit":{"newText":"__make_not_void","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<iterator>","documentation":"Same as C++14 make_reverse_iterator but used in C++03 mode too.","filterText":"__make_reverse_iterator","insertText":"__make_reverse_iterator","insertTextFormat":1,"kind":3,"label":"__make_reverse_iterator(int __i)","score":0.35252547264099121,"sortText":"414b81c8__make_reverse_iterator","textEdit":{"newText":"__make_reverse_iterator","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"_Iterator\n<cmath>","documentation":"Fallback implementation of the function in bits/stl_iterator.h used to\nremove the move_iterator wrapper.","filterText":"__miter_base","insertText":"__miter_base","insertTextFormat":1,"kind":3,"label":"__miter_base(_Iterator __it)","score":0.35252547264099121,"sortText":"414b81c8__miter_base","textEdit":{"newText":"__miter_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<iterator>","filterText":"__miter_base","insertText":"__miter_base","insertTextFormat":1,"kind":3,"label":"__miter_base(\u2026)","score":0.35252547264099121,"sortText":"414b81c8__miter_base","textEdit":{"newText":"__miter_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <iterator>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<iterator>","filterText":"__niter_base","insertText":"__niter_base","insertTextFormat":1,"kind":3,"label":"__niter_base(\u2026)","score":0.35252547264099121,"sortText":"414b81c8__niter_base","textEdit":{"newText":"__niter_base","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <utility>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<utility>","documentation":"PR libstdc++/79141, a utility type for preventing\ninitialization of an argument of a disabled assignment\noperator from a pair of empty braces.","filterText":"__nonesuch_no_braces","insertText":"__nonesuch_no_braces","insertTextFormat":1,"kind":7,"label":"__nonesuch_no_braces","score":0.35252547264099121,"sortText":"414b81c8__nonesuch_no_braces","textEdit":{"newText":"__nonesuch_no_braces","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"Convenience alias for rebinding pointers.","filterText":"__ptr_rebind","insertText":"__ptr_rebind","insertTextFormat":1,"kind":8,"label":"__ptr_rebind<typename _Ptr, typename _Tp>","score":0.35252547264099121,"sortText":"414b81c8__ptr_rebind","textEdit":{"newText":"__ptr_rebind","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","documentation":"Given Template<T, ...> and U return Template<U, ...>, otherwise invalid.","filterText":"__replace_first_arg","insertText":"__replace_first_arg","insertTextFormat":1,"kind":7,"label":"__replace_first_arg<typename _Tp, typename _Up>","score":0.35252547264099121,"sortText":"414b81c8__replace_first_arg","textEdit":{"newText":"__replace_first_arg","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <memory>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<memory>","filterText":"__replace_first_arg_t","insertText":"__replace_first_arg_t","insertTextFormat":1,"kind":8,"label":"__replace_first_arg_t<typename _Tp, typename _Up>","score":0.35252547264099121,"sortText":"414b81c8__replace_first_arg_t","textEdit":{"newText":"__replace_first_arg_t","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"int\n<exception>","documentation":"Attempt dynamic_cast to nested_exception and call rethrow_nested().","filterText":"__rethrow_if_nested_impl","insertText":"__rethrow_if_nested_impl","insertTextFormat":1,"kind":3,"label":"__rethrow_if_nested_impl(const _Ex *__ptr)","score":0.35252547264099121,"sortText":"414b81c8__rethrow_if_nested_impl","textEdit":{"newText":"__rethrow_if_nested_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","documentation":"Helper for exception objects in <new>","filterText":"__throw_bad_alloc","insertText":"__throw_bad_alloc","insertTextFormat":1,"kind":3,"label":"__throw_bad_alloc()","score":0.35252547264099121,"sortText":"414b81c8__throw_bad_alloc","textEdit":{"newText":"__throw_bad_alloc","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","documentation":"Helper for exception objects in <typeinfo>","filterText":"__throw_bad_cast","insertText":"__throw_bad_cast","insertTextFormat":1,"kind":3,"label":"__throw_bad_cast()","score":0.35252547264099121,"sortText":"414b81c8__throw_bad_cast","textEdit":{"newText":"__throw_bad_cast","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","documentation":"Helper for exception objects in <except>","filterText":"__throw_bad_exception","insertText":"__throw_bad_exception","insertTextFormat":1,"kind":3,"label":"__throw_bad_exception()","score":0.35252547264099121,"sortText":"414b81c8__throw_bad_exception","textEdit":{"newText":"__throw_bad_exception","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","documentation":"Helpers for exception objects in <functional>","filterText":"__throw_bad_function_call","insertText":"__throw_bad_function_call","insertTextFormat":1,"kind":3,"label":"__throw_bad_function_call()","score":0.35252547264099121,"sortText":"414b81c8__throw_bad_function_call","textEdit":{"newText":"__throw_bad_function_call","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_invalid_argument","insertText":"__throw_invalid_argument","insertTextFormat":1,"kind":3,"label":"__throw_invalid_argument(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_invalid_argument","textEdit":{"newText":"__throw_invalid_argument","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","documentation":"Helpers for exception objects in <ios>","filterText":"__throw_ios_failure","insertText":"__throw_ios_failure","insertTextFormat":1,"kind":3,"label":"__throw_ios_failure(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_ios_failure","textEdit":{"newText":"__throw_ios_failure","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_length_error","insertText":"__throw_length_error","insertTextFormat":1,"kind":3,"label":"__throw_length_error(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_length_error","textEdit":{"newText":"__throw_length_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","documentation":"Helpers for exception objects in <stdexcept>","filterText":"__throw_logic_error","insertText":"__throw_logic_error","insertTextFormat":1,"kind":3,"label":"__throw_logic_error(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_logic_error","textEdit":{"newText":"__throw_logic_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_out_of_range","insertText":"__throw_out_of_range","insertTextFormat":1,"kind":3,"label":"__throw_out_of_range(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_out_of_range","textEdit":{"newText":"__throw_out_of_range","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_out_of_range_fmt","insertText":"__throw_out_of_range_fmt","insertTextFormat":1,"kind":3,"label":"__throw_out_of_range_fmt(const char *, ...)","score":0.35252547264099121,"sortText":"414b81c8__throw_out_of_range_fmt","textEdit":{"newText":"__throw_out_of_range_fmt","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_overflow_error","insertText":"__throw_overflow_error","insertTextFormat":1,"kind":3,"label":"__throw_overflow_error(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_overflow_error","textEdit":{"newText":"__throw_overflow_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_range_error","insertText":"__throw_range_error","insertTextFormat":1,"kind":3,"label":"__throw_range_error(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_range_error","textEdit":{"newText":"__throw_range_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_runtime_error","insertText":"__throw_runtime_error","insertTextFormat":1,"kind":3,"label":"__throw_runtime_error(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_runtime_error","textEdit":{"newText":"__throw_runtime_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_system_error","insertText":"__throw_system_error","insertTextFormat":1,"kind":3,"label":"__throw_system_error(int)","score":0.35252547264099121,"sortText":"414b81c8__throw_system_error","textEdit":{"newText":"__throw_system_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <list>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"void\n<list>","filterText":"__throw_underflow_error","insertText":"__throw_underflow_error","insertTextFormat":1,"kind":3,"label":"__throw_underflow_error(const char *)","score":0.35252547264099121,"sortText":"414b81c8__throw_underflow_error","textEdit":{"newText":"__throw_underflow_error","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"[2 overloads]\n<exception>","documentation":"[except.nested]/8\nThrow an exception of unspecified type that is publicly derived from\nboth remove_reference_t<_Tp> and nested_exception.","filterText":"__throw_with_nested_impl","insertText":"__throw_with_nested_impl","insertTextFormat":1,"kind":3,"label":"__throw_with_nested_impl(\u2026)","score":0.35252547264099121,"sortText":"414b81c8__throw_with_nested_impl","textEdit":{"newText":"__throw_with_nested_impl","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <cmath>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<cmath>","filterText":"__true_type","insertText":"__true_type","insertTextFormat":1,"kind":7,"label":"__true_type","score":0.35252547264099121,"sortText":"414b81c8__true_type","textEdit":{"newText":"__true_type","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <exception>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"deprecated":true,"detail":"exception_ptr\n<exception>","documentation":"_GLIBCXX_RESOLVE_LIB_DEFECTS\n1130. copy_exception name misleading\n Obtain an exception_ptr pointing to a copy of the supplied object.\n This function is deprecated, use std::make_exception_ptr instead.","filterText":"copy_exception","insertText":"copy_exception","insertTextFormat":1,"kind":3,"label":"copy_exception(_Ex __ex)","score":0.35252547264099121,"sortText":"414b81c8copy_exception","textEdit":{"newText":"copy_exception","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"filterText":"__swappable_details","insertText":"__swappable_details","insertTextFormat":1,"kind":9,"label":"__swappable_details","score":0.27772143483161926,"sortText":"4171ce7f__swappable_details","textEdit":{"newText":"__swappable_details","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"filterText":"__swappable_with_details","insertText":"__swappable_with_details","insertTextFormat":1,"kind":9,"label":"__swappable_with_details","score":0.27772143483161926,"sortText":"4171ce7f__swappable_with_details","textEdit":{"newText":"__swappable_with_details","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"filterText":"__debug","insertText":"__debug","insertTextFormat":1,"kind":9,"label":"__debug","score":0.25638216733932495,"sortText":"417cbb7a__debug","textEdit":{"newText":"__debug","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}},{"filterText":"__exception_ptr","insertText":"__exception_ptr","insertTextFormat":1,"kind":9,"label":"__exception_ptr","score":0.25638216733932495,"sortText":"417cbb7a__exception_ptr","textEdit":{"newText":"__exception_ptr","range":{"end":{"character":8,"line":3},"start":{"character":8,"line":3}}}}]}}

I[21:50:39.700] Updating file /remote/us01home43/longc/temp/mycpptest.cpp with command 
[/remote/us01home43/longc/temp]
/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clang-tool -I/depot/gcc-7.3.0/include/c++/7.3.0 /remote/us01home43/longc/temp/mycpptest.cpp -fsyntax-only -resource-dir=/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0
V[21:50:39.703] Driver produced command: cc1 -cc1 -triple x86_64-unknown-linux-gnu -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name mycpptest.cpp -mrelocation-model static -mthread-model posix -mframe-pointer=all -fmath-errno -fno-rounding-math -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -fno-split-dwarf-inlining -debugger-tuning=gdb -resource-dir /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0 -I /depot/gcc-7.3.0/include/c++/7.3.0 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/x86_64-redhat-linux -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/backward -internal-isystem /usr/local/include -internal-isystem /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0/include -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdeprecated-macro -fdebug-compilation-dir /remote/us01home43/longc/temp -ferror-limit 19 -fmessage-length 0 -fgnuc-version=4.2.1 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -faddrsig -x c++ /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:39.703] Reusing preamble for /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:39.713] index AST for /remote/us01home43/longc/temp/mycpptest.cpp (main=true): 
  symbol slab: 1 symbols, 4456 bytes
  ref slab: 0 symbols, 0 refs, 136 bytes
  relations slab: 0 relations, 24 bytes
I[21:50:39.713] --> textDocument/publishDiagnostics
V[21:50:39.714] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_comma_greater","message":"In included file: expected ',' or '>' in template-parameter-list\n\n/depot/gcc-7.3.0/include/c++/7.3.0/type_traits:458:49:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"fatal_too_many_errors","message":"Too many errors emitted, stopping now","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":9,"line":4},"start":{"character":3,"line":4}},"severity":1,"source":"clang"}],"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}

V[21:50:39.894] <<< {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"#include <vector>\n\nint main() {\n   std::v\n   return 0;\n}\n"}],"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp","version":4}}}

I[21:50:39.894] <-- textDocument/didChange
V[21:50:39.895] <<< {"id":3,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":9,"line":3},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:39.895] <-- textDocument/completion(3)
V[21:50:39.915] Code complete: fuzzyFind({
  "AnyScope": false,
  "Limit": 500,
  "PreferredTypes": [
    []
  ],
  "ProximityPaths": [
    [
      "/remote/us01home43/longc/temp/mycpptest.cpp"
    ]
  ],
  "Query": "v",
  "RestrictForCodeCompletion": true,
  "Scopes": [
    [
      "std::"
    ]
  ]
})
V[21:50:39.917] Dex query tree: (LIMIT 50000 (& T=v S=std:: ?=Restricted For Code Completion))
I[21:50:39.917] Code complete: sema context Symbol, query scopes [std::] (AnyScope=false), expected type <none>
I[21:50:39.918] Code complete: 0 results from Sema, 2 from Index, 0 matched, 0 from identifiers, 2 returned (incomplete).
I[21:50:39.918] --> reply:textDocument/completion(3) 22 ms
V[21:50:39.921] >>> {"id":3,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"\n<vector>","documentation":"\n  @brief A standard container which offers fixed time access to\n  individual elements in any order.\n\n  @ingroup sequences\n\n  @tparam _Tp  Type of element.\n  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.\n\n  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n  <a href=\"tables.html#66\">reversible container</a>, and a\n  <a href=\"tables.html#67\">sequence</a>, including the\n  <a href=\"tables.html#68\">optional sequence requirements</a> with the\n  %exception of @c push_front and @c pop_front.\n\n  In some terminology a %vector can be described as a dynamic\n  C-style array, it offers fast and efficient access to individual\n  elements in any order and saves the user from worrying about\n  memory and size allocation.  Subscripting ( @c [] ) access is\n  also provided as with C-style arrays.\n  ","filterText":"vector","insertText":"vector","insertTextFormat":1,"kind":7,"label":"vector<typename _Tp, typename _Alloc>","score":4.1770477294921875,"sortText":"3f7a55a0vector","textEdit":{"newText":"vector","range":{"end":{"character":9,"line":3},"start":{"character":8,"line":3}}}},{"additionalTextEdits":[{"newText":"#include <type_traits>\n","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}}}],"detail":"\n<type_traits>","documentation":"A metafunction that always yields void, used for detecting valid types.","filterText":"void_t","insertText":"void_t","insertTextFormat":1,"kind":8,"label":"void_t<typename>","score":3.8186695575714111,"sortText":"3f8b9aebvoid_t","textEdit":{"newText":"void_t","range":{"end":{"character":9,"line":3},"start":{"character":8,"line":3}}}}]}}

V[21:50:39.993] <<< {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"#include <vector>\n\nint main() {\n   std::ve\n   return 0;\n}\n"}],"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp","version":5}}}

I[21:50:39.993] <-- textDocument/didChange
V[21:50:39.994] <<< {"id":4,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":10,"line":3},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:39.994] <-- textDocument/completion(4)
V[21:50:40.002] Code complete: fuzzyFind({
  "AnyScope": false,
  "Limit": 500,
  "PreferredTypes": [
    []
  ],
  "ProximityPaths": [
    [
      "/remote/us01home43/longc/temp/mycpptest.cpp"
    ]
  ],
  "Query": "ve",
  "RestrictForCodeCompletion": true,
  "Scopes": [
    [
      "std::"
    ]
  ]
})
V[21:50:40.002] Dex query tree: (LIMIT 50000 (& T=ve S=std:: ?=Restricted For Code Completion))
I[21:50:40.003] Code complete: sema context Symbol, query scopes [std::] (AnyScope=false), expected type <none>
I[21:50:40.003] Code complete: 0 results from Sema, 1 from Index, 0 matched, 0 from identifiers, 1 returned (incomplete).
I[21:50:40.003] --> reply:textDocument/completion(4) 9 ms
V[21:50:40.006] >>> {"id":4,"jsonrpc":"2.0","result":{"isIncomplete":true,"items":[{"detail":"\n<vector>","documentation":"\n  @brief A standard container which offers fixed time access to\n  individual elements in any order.\n\n  @ingroup sequences\n\n  @tparam _Tp  Type of element.\n  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.\n\n  Meets the requirements of a <a href=\"tables.html#65\">container</a>, a\n  <a href=\"tables.html#66\">reversible container</a>, and a\n  <a href=\"tables.html#67\">sequence</a>, including the\n  <a href=\"tables.html#68\">optional sequence requirements</a> with the\n  %exception of @c push_front and @c pop_front.\n\n  In some terminology a %vector can be described as a dynamic\n  C-style array, it offers fast and efficient access to individual\n  elements in any order and saves the user from worrying about\n  memory and size allocation.  Subscripting ( @c [] ) access is\n  also provided as with C-style arrays.\n  ","filterText":"vector","insertText":"vector","insertTextFormat":1,"kind":7,"label":"vector<typename _Tp, typename _Alloc>","score":4.1770477294921875,"sortText":"3f7a55a0vector","textEdit":{"newText":"vector","range":{"end":{"character":10,"line":3},"start":{"character":8,"line":3}}}}]}}

I[21:50:40.493] Updating file /remote/us01home43/longc/temp/mycpptest.cpp with command 
[/remote/us01home43/longc/temp]
/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clang-tool -I/depot/gcc-7.3.0/include/c++/7.3.0 /remote/us01home43/longc/temp/mycpptest.cpp -fsyntax-only -resource-dir=/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0
V[21:50:40.496] Driver produced command: cc1 -cc1 -triple x86_64-unknown-linux-gnu -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name mycpptest.cpp -mrelocation-model static -mthread-model posix -mframe-pointer=all -fmath-errno -fno-rounding-math -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -fno-split-dwarf-inlining -debugger-tuning=gdb -resource-dir /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0 -I /depot/gcc-7.3.0/include/c++/7.3.0 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/x86_64-redhat-linux -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/backward -internal-isystem /usr/local/include -internal-isystem /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0/include -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdeprecated-macro -fdebug-compilation-dir /remote/us01home43/longc/temp -ferror-limit 19 -fmessage-length 0 -fgnuc-version=4.2.1 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -faddrsig -x c++ /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:40.496] Reusing preamble for /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:40.517] Trying to fix unresolved name "ve" in scopes: [std::]
V[21:50:40.518] Dex query tree: (LIMIT 10000 (& T=ve S=std:: ?=Restricted For Code Completion))
V[21:50:40.518] index AST for /remote/us01home43/longc/temp/mycpptest.cpp (main=true): 
  symbol slab: 1 symbols, 4456 bytes
  ref slab: 0 symbols, 0 refs, 136 bytes
  relations slab: 0 relations, 24 bytes
I[21:50:40.518] --> textDocument/publishDiagnostics
V[21:50:40.518] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_comma_greater","message":"In included file: expected ',' or '>' in template-parameter-list\n\n/depot/gcc-7.3.0/include/c++/7.3.0/type_traits:458:49:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"fatal_too_many_errors","message":"Too many errors emitted, stopping now","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"expected_semi_after_expr","message":"Expected ';' after expression (fix available)","range":{"end":{"character":9,"line":4},"start":{"character":3,"line":4}},"severity":1,"source":"clang"},{"code":"no_member","message":"No member named 've' in namespace 'std'","range":{"end":{"character":10,"line":3},"start":{"character":8,"line":3}},"severity":1,"source":"clang"}],"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}

V[21:50:45.486] <<< {"jsonrpc":"2.0","method":"textDocument/didChange","params":{"contentChanges":[{"text":"#include <vector>\n\nint main() {\n   std::vector<int> ivec;\n   ivec.\n   return 0;\n}\n"}],"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp","version":6}}}

I[21:50:45.486] <-- textDocument/didChange
V[21:50:45.487] <<< {"id":5,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":8,"line":4},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:45.487] <-- textDocument/completion(5)
V[21:50:45.500] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:77:2:no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'
V[21:50:45.500] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:45.500] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:45.502] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/alloc_traits.h:88:24:type 'int' cannot be used prior to '::' because it has no members
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:52:5:in instantiation of template class 'std::allocator_traits<int>' requested here
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:45.504] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:59:34:no type named 'pointer' in 'std::allocator_traits<int>'
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:45.504] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:60:34:no type named 'const_pointer' in 'std::allocator_traits<int>'
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:61:34:no type named 'size_type' in 'std::allocator_traits<int>'
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:62:34:no type named 'difference_type' in 'std::allocator_traits<int>'
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:82:16:base specifier must name a class
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:166:20:in instantiation of member class 'std::_Vector_base<int, std::allocator<int> >::_Vector_impl' requested here
V[21:50:45.504] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:45.504] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
I[21:50:45.508] Code complete: 0 results from Sema, 0 from Index, 0 matched, 0 from identifiers, 0 returned.
I[21:50:45.508] --> reply:textDocument/completion(5) 20 ms
V[21:50:45.511] >>> {"id":5,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}

I[21:50:45.988] Updating file /remote/us01home43/longc/temp/mycpptest.cpp with command 
[/remote/us01home43/longc/temp]
/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clangd/output/bin/clang-tool -I/depot/gcc-7.3.0/include/c++/7.3.0 /remote/us01home43/longc/temp/mycpptest.cpp -fsyntax-only -resource-dir=/remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0
V[21:50:45.990] Driver produced command: cc1 -cc1 -triple x86_64-unknown-linux-gnu -fsyntax-only -disable-free -disable-llvm-verifier -discard-value-names -main-file-name mycpptest.cpp -mrelocation-model static -mthread-model posix -mframe-pointer=all -fmath-errno -fno-rounding-math -masm-verbose -mconstructor-aliases -munwind-tables -target-cpu x86-64 -dwarf-column-info -fno-split-dwarf-inlining -debugger-tuning=gdb -resource-dir /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0 -I /depot/gcc-7.3.0/include/c++/7.3.0 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5 -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/x86_64-redhat-linux -internal-isystem /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/backward -internal-isystem /usr/local/include -internal-isystem /remote/ltg_proj01_us01/user/longc/datahome/vim.home/plugged/YouCompleteMe/third_party/ycmd/third_party/clang/lib/clang/10.0.0/include -internal-externc-isystem /include -internal-externc-isystem /usr/include -fdeprecated-macro -fdebug-compilation-dir /remote/us01home43/longc/temp -ferror-limit 19 -fmessage-length 0 -fgnuc-version=4.2.1 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -faddrsig -x c++ /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:45.991] Reusing preamble for /remote/us01home43/longc/temp/mycpptest.cpp
V[21:50:46.002] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: type 'int' cannot be used prior to '::' because it has no members
V[21:50:46.002] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'pointer' in 'std::allocator_traits<int>'
V[21:50:46.002] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'const_pointer' in 'std::allocator_traits<int>'
V[21:50:46.002] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'size_type' in 'std::allocator_traits<int>'
V[21:50:46.002] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: no type named 'difference_type' in 'std::allocator_traits<int>'
V[21:50:46.004] Dropped diagnostic: /remote/us01home43/longc/temp/mycpptest.cpp: in included file: base specifier must name a class
V[21:50:46.005] index AST for /remote/us01home43/longc/temp/mycpptest.cpp (main=true): 
  symbol slab: 1 symbols, 4456 bytes
  ref slab: 1 symbols, 1 refs, 4256 bytes
  relations slab: 0 relations, 24 bytes
I[21:50:46.005] --> textDocument/publishDiagnostics
V[21:50:46.006] >>> {"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"diagnostics":[{"code":"expected_comma_greater","message":"In included file: expected ',' or '>' in template-parameter-list\n\n/depot/gcc-7.3.0/include/c++/7.3.0/type_traits:458:49:\nnote: error occurred here","range":{"end":{"character":10,"line":0},"start":{"character":9,"line":0}},"severity":1,"source":"clang"},{"code":"fatal_too_many_errors","message":"Too many errors emitted, stopping now","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"code":"no_member","message":"In included file: no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'\n\n/depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:77:2:\nnote: error occurred here\n\n/depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:\nnote: in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here\n\nmycpptest.cpp:4:21: note: in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here","range":{"end":{"character":1,"line":0},"start":{"character":0,"line":0}},"severity":1,"source":"clang"},{"message":"In instantiation of template class 'std::vector<int, std::allocator<int> >' requested here\n\nmycpptest.cpp:1:1: error: in included file: no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'","range":{"end":{"character":24,"line":3},"start":{"character":20,"line":3}},"severity":3},{"code":"expected_unqualified_id","message":"Expected unqualified-id","range":{"end":{"character":9,"line":5},"start":{"character":3,"line":5}},"severity":1,"source":"clang"}],"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}

V[21:50:48.036] <<< {"id":6,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":8,"line":4},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:48.036] <-- textDocument/completion(6)
V[21:50:48.043] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:77:2:no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'
V[21:50:48.043] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.043] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:48.044] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/alloc_traits.h:88:24:type 'int' cannot be used prior to '::' because it has no members
V[21:50:48.045] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:52:5:in instantiation of template class 'std::allocator_traits<int>' requested here
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.046] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:59:34:no type named 'pointer' in 'std::allocator_traits<int>'
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.046] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:60:34:no type named 'const_pointer' in 'std::allocator_traits<int>'
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:61:34:no type named 'size_type' in 'std::allocator_traits<int>'
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:62:34:no type named 'difference_type' in 'std::allocator_traits<int>'
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:82:16:base specifier must name a class
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:166:20:in instantiation of member class 'std::_Vector_base<int, std::allocator<int> >::_Vector_impl' requested here
V[21:50:48.046] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.046] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
I[21:50:48.048] Code complete: 0 results from Sema, 0 from Index, 0 matched, 0 from identifiers, 0 returned.
I[21:50:48.048] --> reply:textDocument/completion(6) 12 ms
V[21:50:48.050] >>> {"id":6,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}

V[21:50:48.750] <<< {"id":7,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":8,"line":4},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:48.750] <-- textDocument/completion(7)
V[21:50:48.756] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:77:2:no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'
V[21:50:48.756] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.756] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:48.758] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/alloc_traits.h:88:24:type 'int' cannot be used prior to '::' because it has no members
V[21:50:48.759] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:52:5:in instantiation of template class 'std::allocator_traits<int>' requested here
V[21:50:48.759] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:48.759] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.759] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:48.759] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:59:34:no type named 'pointer' in 'std::allocator_traits<int>'
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.760] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:60:34:no type named 'const_pointer' in 'std::allocator_traits<int>'
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:61:34:no type named 'size_type' in 'std::allocator_traits<int>'
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:62:34:no type named 'difference_type' in 'std::allocator_traits<int>'
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:82:16:base specifier must name a class
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:166:20:in instantiation of member class 'std::_Vector_base<int, std::allocator<int> >::_Vector_impl' requested here
V[21:50:48.760] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:48.760] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
I[21:50:48.763] Code complete: 0 results from Sema, 0 from Index, 0 matched, 0 from identifiers, 0 returned.
I[21:50:48.763] --> reply:textDocument/completion(7) 12 ms
V[21:50:48.763] >>> {"id":7,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}

V[21:50:49.227] <<< {"id":8,"jsonrpc":"2.0","method":"textDocument/completion","params":{"position":{"character":8,"line":4},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:49.227] <-- textDocument/completion(8)
V[21:50:49.236] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:77:2:no member named 'rebind' in '__gnu_cxx::__alloc_traits<std::allocator<int> >'
V[21:50:49.236] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:49.236] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:49.237] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/alloc_traits.h:88:24:type 'int' cannot be used prior to '::' because it has no members
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:52:5:in instantiation of template class 'std::allocator_traits<int>' requested here
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:49.239] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:59:34:no type named 'pointer' in 'std::allocator_traits<int>'
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:78:35:in instantiation of template class '__gnu_cxx::__alloc_traits<int>' requested here
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:49.239] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:60:34:no type named 'const_pointer' in 'std::allocator_traits<int>'
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:61:34:no type named 'size_type' in 'std::allocator_traits<int>'
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/ext/alloc_traits.h:62:34:no type named 'difference_type' in 'std::allocator_traits<int>'
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:82:16:base specifier must name a class
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:166:20:in instantiation of member class 'std::_Vector_base<int, std::allocator<int> >::_Vector_impl' requested here
V[21:50:49.239] Ignored diagnostic. /depot/gcc-7.3.0/include/c++/7.3.0/bits/stl_vector.h:216:30:in instantiation of template class 'std::_Vector_base<int, std::allocator<int> >' requested here
V[21:50:49.239] Ignored diagnostic. /remote/us01home43/longc/temp/mycpptest.cpp:4:21:in instantiation of template class 'std::vector<int, std::allocator<int> >' requested here
I[21:50:49.242] Code complete: 0 results from Sema, 0 from Index, 0 matched, 0 from identifiers, 0 returned.
I[21:50:49.242] --> reply:textDocument/completion(8) 14 ms
V[21:50:49.243] >>> {"id":8,"jsonrpc":"2.0","result":{"isIncomplete":false,"items":[]}}

V[21:50:57.388] <<< {"id":9,"jsonrpc":"2.0","method":"textDocument/hover","params":{"position":{"character":7,"line":4},"textDocument":{"uri":"file:///remote/us01home43/longc/temp/mycpptest.cpp"}}}

I[21:50:57.388] <-- textDocument/hover(9)
I[21:50:57.392] --> reply:textDocument/hover(9) 3 ms
V[21:50:57.392] >>> {"id":9,"jsonrpc":"2.0","result":null}

